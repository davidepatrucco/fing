/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FIACoinV7UpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXECUTION_DELAY"
      | "FEE_CHANGE_DELAY"
      | "LOCK_180_DAYS"
      | "LOCK_30_DAYS"
      | "LOCK_365_DAYS"
      | "LOCK_90_DAYS"
      | "MAX_TOTAL_FEE_BP"
      | "PROPOSAL_THRESHOLD"
      | "QUORUM_PERCENTAGE"
      | "TOTAL_SUPPLY"
      | "UPGRADE_INTERFACE_VERSION"
      | "VOTING_PERIOD"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "baseAPYMultiplier"
      | "batchStake"
      | "bugFixVersion"
      | "calculateRewards"
      | "configureDynamicAPY"
      | "decimals"
      | "dynamicAPYEnabled"
      | "emergencyPause"
      | "emergencyUnpause"
      | "emergencyWithdrawalEnabled"
      | "executor"
      | "feeToBurnBP"
      | "feeToFounderBP"
      | "feeToTreasuryBP"
      | "founderWallet"
      | "getEffectiveAPY"
      | "getStakeCount"
      | "getUserStakingInfo"
      | "hasVoted"
      | "initialize"
      | "initializeV7"
      | "isFeeExempt"
      | "lastFeeChange"
      | "lastTxBlock"
      | "lastTxTime"
      | "name"
      | "owner"
      | "paused"
      | "proposalCount"
      | "proposals"
      | "proposeWithAutoExecution"
      | "proxiableUUID"
      | "renounceOwnership"
      | "rewardPool"
      | "setEmergencyWithdrawal"
      | "setTotalFeeBP"
      | "stake"
      | "stakingAPY"
      | "symbol"
      | "tokenStats"
      | "totalFeeBP"
      | "totalStaked"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "treasury"
      | "txLimits"
      | "unstake"
      | "upgradeToAndCall"
      | "usedNonces"
      | "userStakes"
      | "userStats"
      | "version"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BatchTransfer"
      | "BugFixApplied"
      | "DynamicAPYEnabled"
      | "EmergencyAction"
      | "EmergencyWithdrawalToggled"
      | "FeeConfigurationChanged"
      | "FeeDistributionChanged"
      | "FeeExemptionSet"
      | "Fingered"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "RewardClaimed"
      | "Staked"
      | "Transfer"
      | "TransferWithDataLite"
      | "Unpaused"
      | "Unstaked"
      | "Upgraded"
      | "V7FeatureUsed"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXECUTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_CHANGE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_180_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_30_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_365_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_90_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_FEE_BP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseAPYMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchStake",
    values: [BigNumberish[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bugFixVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureDynamicAPY",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dynamicAPYEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawalEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToBurnBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToFounderBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToTreasuryBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "founderWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEffectiveAPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeExempt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTxBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTxTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWithAutoExecution",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyWithdrawal",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalFeeBP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingAPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "txLimits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_CHANGE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_180_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_30_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_365_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_90_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_FEE_BP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseAPYMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bugFixVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureDynamicAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicAPYEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawalEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToBurnBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToFounderBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToTreasuryBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEffectiveAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV7",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTxBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastTxTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeWithAutoExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalFeeBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakingAPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFeeBP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "txLimits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    totalAmount: BigNumberish,
    recipientCount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    totalAmount: bigint,
    recipientCount: bigint
  ];
  export interface OutputObject {
    from: string;
    totalAmount: bigint;
    recipientCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BugFixAppliedEvent {
  export type InputTuple = [version: BigNumberish, description: string];
  export type OutputTuple = [version: bigint, description: string];
  export interface OutputObject {
    version: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicAPYEnabledEvent {
  export type InputTuple = [enabled: boolean, multiplier: BigNumberish];
  export type OutputTuple = [enabled: boolean, multiplier: bigint];
  export interface OutputObject {
    enabled: boolean;
    multiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [action: string, actor: AddressLike];
  export type OutputTuple = [action: string, actor: string];
  export interface OutputObject {
    action: string;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalToggledEvent {
  export type InputTuple = [user: AddressLike, enabled: boolean];
  export type OutputTuple = [user: string, enabled: boolean];
  export interface OutputObject {
    user: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeConfigurationChangedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDistributionChangedEvent {
  export type InputTuple = [
    treasury: BigNumberish,
    founder: BigNumberish,
    burn: BigNumberish
  ];
  export type OutputTuple = [treasury: bigint, founder: bigint, burn: bigint];
  export interface OutputObject {
    treasury: bigint;
    founder: bigint;
    burn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeExemptionSetEvent {
  export type InputTuple = [account: AddressLike, exempt: boolean];
  export type OutputTuple = [account: string, exempt: boolean];
  export interface OutputObject {
    account: string;
    exempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FingeredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    reward: BigNumberish,
    stakeIndex: BigNumberish
  ];
  export type OutputTuple = [user: string, reward: bigint, stakeIndex: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
    stakeIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    lockPeriod: BigNumberish,
    stakeIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    lockPeriod: bigint,
    stakeIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    lockPeriod: bigint;
    stakeIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferWithDataLiteEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    memoHash: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    memoHash: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    memoHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    stakeIndex: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, stakeIndex: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    stakeIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace V7FeatureUsedEvent {
  export type InputTuple = [user: AddressLike, feature: string];
  export type OutputTuple = [user: string, feature: string];
  export interface OutputObject {
    user: string;
    feature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FIACoinV7Upgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): FIACoinV7Upgradeable;
  waitForDeployment(): Promise<this>;

  interface: FIACoinV7UpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXECUTION_DELAY: TypedContractMethod<[], [bigint], "view">;

  FEE_CHANGE_DELAY: TypedContractMethod<[], [bigint], "view">;

  LOCK_180_DAYS: TypedContractMethod<[], [bigint], "view">;

  LOCK_30_DAYS: TypedContractMethod<[], [bigint], "view">;

  LOCK_365_DAYS: TypedContractMethod<[], [bigint], "view">;

  LOCK_90_DAYS: TypedContractMethod<[], [bigint], "view">;

  MAX_TOTAL_FEE_BP: TypedContractMethod<[], [bigint], "view">;

  PROPOSAL_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  QUORUM_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  baseAPYMultiplier: TypedContractMethod<[], [bigint], "view">;

  batchStake: TypedContractMethod<
    [
      amounts: BigNumberish[],
      lockPeriods: BigNumberish[],
      autoCompounds: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  bugFixVersion: TypedContractMethod<[], [bigint], "view">;

  calculateRewards: TypedContractMethod<
    [user: AddressLike, stakeIndex: BigNumberish],
    [bigint],
    "view"
  >;

  configureDynamicAPY: TypedContractMethod<
    [enabled: boolean, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  dynamicAPYEnabled: TypedContractMethod<[], [boolean], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdrawalEnabled: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  executor: TypedContractMethod<[], [string], "view">;

  feeToBurnBP: TypedContractMethod<[], [bigint], "view">;

  feeToFounderBP: TypedContractMethod<[], [bigint], "view">;

  feeToTreasuryBP: TypedContractMethod<[], [bigint], "view">;

  founderWallet: TypedContractMethod<[], [string], "view">;

  getEffectiveAPY: TypedContractMethod<
    [lockPeriod: BigNumberish],
    [bigint],
    "view"
  >;

  getStakeCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserStakingInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUserStaked: bigint;
        totalPendingRewards: bigint;
        activeStakes: bigint;
        nextUnlockTime: bigint;
      }
    ],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_treasury: AddressLike, _founder: AddressLike, _executor: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeV7: TypedContractMethod<[], [void], "nonpayable">;

  isFeeExempt: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastFeeChange: TypedContractMethod<[], [bigint], "view">;

  lastTxBlock: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastTxTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        id: bigint;
        proposer: string;
        description: string;
        forVotes: bigint;
        againstVotes: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
        proposalType: bigint;
        proposalData: string;
      }
    ],
    "view"
  >;

  proposeWithAutoExecution: TypedContractMethod<
    [
      description: string,
      proposalType: BigNumberish,
      proposalData: BytesLike,
      executionDelay: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardPool: TypedContractMethod<[], [bigint], "view">;

  setEmergencyWithdrawal: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setTotalFeeBP: TypedContractMethod<
    [_totalFeeBP: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [amount: BigNumberish, lockPeriod: BigNumberish, autoCompound: boolean],
    [void],
    "nonpayable"
  >;

  stakingAPY: TypedContractMethod<[lockPeriod: BigNumberish], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalFeeCollected: bigint;
        totalBurned: bigint;
        totalStaked: bigint;
        uniqueHolders: bigint;
        transactionCount: bigint;
      }
    ],
    "view"
  >;

  totalFeeBP: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  txLimits: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        maxTxAmount: bigint;
        maxWalletAmount: bigint;
        txCooldown: bigint;
        limitsActive: boolean;
      }
    ],
    "view"
  >;

  unstake: TypedContractMethod<
    [stakeIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usedNonces: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  userStakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint;
        stakingTime: bigint;
        lastRewardClaim: bigint;
        lockPeriod: bigint;
        autoCompound: boolean;
      }
    ],
    "view"
  >;

  userStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalFeesPaid: bigint;
        totalStakingRewards: bigint;
        transactionCount: bigint;
        firstTransactionTime: bigint;
      }
    ],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  votingPower: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXECUTION_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_CHANGE_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_180_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_30_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_365_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_90_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TOTAL_FEE_BP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSAL_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUORUM_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseAPYMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchStake"
  ): TypedContractMethod<
    [
      amounts: BigNumberish[],
      lockPeriods: BigNumberish[],
      autoCompounds: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bugFixVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRewards"
  ): TypedContractMethod<
    [user: AddressLike, stakeIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "configureDynamicAPY"
  ): TypedContractMethod<
    [enabled: boolean, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dynamicAPYEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawalEnabled"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "executor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeToBurnBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeToFounderBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeToTreasuryBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "founderWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEffectiveAPY"
  ): TypedContractMethod<[lockPeriod: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStakingInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUserStaked: bigint;
        totalPendingRewards: bigint;
        activeStakes: bigint;
        nextUnlockTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_treasury: AddressLike, _founder: AddressLike, _executor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeV7"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isFeeExempt"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastFeeChange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTxBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTxTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        id: bigint;
        proposer: string;
        description: string;
        forVotes: bigint;
        againstVotes: bigint;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
        proposalType: bigint;
        proposalData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeWithAutoExecution"
  ): TypedContractMethod<
    [
      description: string,
      proposalType: BigNumberish,
      proposalData: BytesLike,
      executionDelay: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEmergencyWithdrawal"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalFeeBP"
  ): TypedContractMethod<[_totalFeeBP: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, lockPeriod: BigNumberish, autoCompound: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingAPY"
  ): TypedContractMethod<[lockPeriod: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalFeeCollected: bigint;
        totalBurned: bigint;
        totalStaked: bigint;
        uniqueHolders: bigint;
        transactionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalFeeBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "txLimits"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        maxTxAmount: bigint;
        maxWalletAmount: bigint;
        txCooldown: bigint;
        limitsActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[stakeIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usedNonces"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint;
        stakingTime: bigint;
        lastRewardClaim: bigint;
        lockPeriod: bigint;
        autoCompound: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalFeesPaid: bigint;
        totalStakingRewards: bigint;
        transactionCount: bigint;
        firstTransactionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BatchTransfer"
  ): TypedContractEvent<
    BatchTransferEvent.InputTuple,
    BatchTransferEvent.OutputTuple,
    BatchTransferEvent.OutputObject
  >;
  getEvent(
    key: "BugFixApplied"
  ): TypedContractEvent<
    BugFixAppliedEvent.InputTuple,
    BugFixAppliedEvent.OutputTuple,
    BugFixAppliedEvent.OutputObject
  >;
  getEvent(
    key: "DynamicAPYEnabled"
  ): TypedContractEvent<
    DynamicAPYEnabledEvent.InputTuple,
    DynamicAPYEnabledEvent.OutputTuple,
    DynamicAPYEnabledEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawalToggled"
  ): TypedContractEvent<
    EmergencyWithdrawalToggledEvent.InputTuple,
    EmergencyWithdrawalToggledEvent.OutputTuple,
    EmergencyWithdrawalToggledEvent.OutputObject
  >;
  getEvent(
    key: "FeeConfigurationChanged"
  ): TypedContractEvent<
    FeeConfigurationChangedEvent.InputTuple,
    FeeConfigurationChangedEvent.OutputTuple,
    FeeConfigurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeDistributionChanged"
  ): TypedContractEvent<
    FeeDistributionChangedEvent.InputTuple,
    FeeDistributionChangedEvent.OutputTuple,
    FeeDistributionChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeExemptionSet"
  ): TypedContractEvent<
    FeeExemptionSetEvent.InputTuple,
    FeeExemptionSetEvent.OutputTuple,
    FeeExemptionSetEvent.OutputObject
  >;
  getEvent(
    key: "Fingered"
  ): TypedContractEvent<
    FingeredEvent.InputTuple,
    FingeredEvent.OutputTuple,
    FingeredEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferWithDataLite"
  ): TypedContractEvent<
    TransferWithDataLiteEvent.InputTuple,
    TransferWithDataLiteEvent.OutputTuple,
    TransferWithDataLiteEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "V7FeatureUsed"
  ): TypedContractEvent<
    V7FeatureUsedEvent.InputTuple,
    V7FeatureUsedEvent.OutputTuple,
    V7FeatureUsedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BatchTransfer(address,uint256,uint256)": TypedContractEvent<
      BatchTransferEvent.InputTuple,
      BatchTransferEvent.OutputTuple,
      BatchTransferEvent.OutputObject
    >;
    BatchTransfer: TypedContractEvent<
      BatchTransferEvent.InputTuple,
      BatchTransferEvent.OutputTuple,
      BatchTransferEvent.OutputObject
    >;

    "BugFixApplied(uint256,string)": TypedContractEvent<
      BugFixAppliedEvent.InputTuple,
      BugFixAppliedEvent.OutputTuple,
      BugFixAppliedEvent.OutputObject
    >;
    BugFixApplied: TypedContractEvent<
      BugFixAppliedEvent.InputTuple,
      BugFixAppliedEvent.OutputTuple,
      BugFixAppliedEvent.OutputObject
    >;

    "DynamicAPYEnabled(bool,uint256)": TypedContractEvent<
      DynamicAPYEnabledEvent.InputTuple,
      DynamicAPYEnabledEvent.OutputTuple,
      DynamicAPYEnabledEvent.OutputObject
    >;
    DynamicAPYEnabled: TypedContractEvent<
      DynamicAPYEnabledEvent.InputTuple,
      DynamicAPYEnabledEvent.OutputTuple,
      DynamicAPYEnabledEvent.OutputObject
    >;

    "EmergencyAction(string,address)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "EmergencyWithdrawalToggled(address,bool)": TypedContractEvent<
      EmergencyWithdrawalToggledEvent.InputTuple,
      EmergencyWithdrawalToggledEvent.OutputTuple,
      EmergencyWithdrawalToggledEvent.OutputObject
    >;
    EmergencyWithdrawalToggled: TypedContractEvent<
      EmergencyWithdrawalToggledEvent.InputTuple,
      EmergencyWithdrawalToggledEvent.OutputTuple,
      EmergencyWithdrawalToggledEvent.OutputObject
    >;

    "FeeConfigurationChanged(uint256,uint256)": TypedContractEvent<
      FeeConfigurationChangedEvent.InputTuple,
      FeeConfigurationChangedEvent.OutputTuple,
      FeeConfigurationChangedEvent.OutputObject
    >;
    FeeConfigurationChanged: TypedContractEvent<
      FeeConfigurationChangedEvent.InputTuple,
      FeeConfigurationChangedEvent.OutputTuple,
      FeeConfigurationChangedEvent.OutputObject
    >;

    "FeeDistributionChanged(uint256,uint256,uint256)": TypedContractEvent<
      FeeDistributionChangedEvent.InputTuple,
      FeeDistributionChangedEvent.OutputTuple,
      FeeDistributionChangedEvent.OutputObject
    >;
    FeeDistributionChanged: TypedContractEvent<
      FeeDistributionChangedEvent.InputTuple,
      FeeDistributionChangedEvent.OutputTuple,
      FeeDistributionChangedEvent.OutputObject
    >;

    "FeeExemptionSet(address,bool)": TypedContractEvent<
      FeeExemptionSetEvent.InputTuple,
      FeeExemptionSetEvent.OutputTuple,
      FeeExemptionSetEvent.OutputObject
    >;
    FeeExemptionSet: TypedContractEvent<
      FeeExemptionSetEvent.InputTuple,
      FeeExemptionSetEvent.OutputTuple,
      FeeExemptionSetEvent.OutputObject
    >;

    "Fingered(address,address,uint256)": TypedContractEvent<
      FingeredEvent.InputTuple,
      FingeredEvent.OutputTuple,
      FingeredEvent.OutputObject
    >;
    Fingered: TypedContractEvent<
      FingeredEvent.InputTuple,
      FingeredEvent.OutputTuple,
      FingeredEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferWithDataLite(address,address,uint256,bytes32)": TypedContractEvent<
      TransferWithDataLiteEvent.InputTuple,
      TransferWithDataLiteEvent.OutputTuple,
      TransferWithDataLiteEvent.OutputObject
    >;
    TransferWithDataLite: TypedContractEvent<
      TransferWithDataLiteEvent.InputTuple,
      TransferWithDataLiteEvent.OutputTuple,
      TransferWithDataLiteEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "V7FeatureUsed(address,string)": TypedContractEvent<
      V7FeatureUsedEvent.InputTuple,
      V7FeatureUsedEvent.OutputTuple,
      V7FeatureUsedEvent.OutputObject
    >;
    V7FeatureUsed: TypedContractEvent<
      V7FeatureUsedEvent.InputTuple,
      V7FeatureUsedEvent.OutputTuple,
      V7FeatureUsedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
