/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FIACoinMigrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "enableMigration"
      | "getMigrationStatus"
      | "hasMigrated"
      | "migrate"
      | "migratedAmount"
      | "migrationEnabled"
      | "newContract"
      | "oldContract"
      | "owner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MigrationEnabled" | "UserMigrated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "enableMigration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrationStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMigrated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migratedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "enableMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace MigrationEnabledEvent {
  export type InputTuple = [newContract: AddressLike];
  export type OutputTuple = [newContract: string];
  export interface OutputObject {
    newContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserMigratedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    stakeCount: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, stakeCount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    stakeCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FIACoinMigration extends BaseContract {
  connect(runner?: ContractRunner | null): FIACoinMigration;
  waitForDeployment(): Promise<this>;

  interface: FIACoinMigrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  enableMigration: TypedContractMethod<
    [_newContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getMigrationStatus: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        eligible: boolean;
        completed: boolean;
        balance: bigint;
        stakeCount: bigint;
      }
    ],
    "view"
  >;

  hasMigrated: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  migrate: TypedContractMethod<[], [void], "nonpayable">;

  migratedAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  migrationEnabled: TypedContractMethod<[], [boolean], "view">;

  newContract: TypedContractMethod<[], [string], "view">;

  oldContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "enableMigration"
  ): TypedContractMethod<[_newContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMigrationStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        eligible: boolean;
        completed: boolean;
        balance: bigint;
        stakeCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasMigrated"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migratedAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrationEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "newContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oldContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MigrationEnabled"
  ): TypedContractEvent<
    MigrationEnabledEvent.InputTuple,
    MigrationEnabledEvent.OutputTuple,
    MigrationEnabledEvent.OutputObject
  >;
  getEvent(
    key: "UserMigrated"
  ): TypedContractEvent<
    UserMigratedEvent.InputTuple,
    UserMigratedEvent.OutputTuple,
    UserMigratedEvent.OutputObject
  >;

  filters: {
    "MigrationEnabled(address)": TypedContractEvent<
      MigrationEnabledEvent.InputTuple,
      MigrationEnabledEvent.OutputTuple,
      MigrationEnabledEvent.OutputObject
    >;
    MigrationEnabled: TypedContractEvent<
      MigrationEnabledEvent.InputTuple,
      MigrationEnabledEvent.OutputTuple,
      MigrationEnabledEvent.OutputObject
    >;

    "UserMigrated(address,uint256,uint256)": TypedContractEvent<
      UserMigratedEvent.InputTuple,
      UserMigratedEvent.OutputTuple,
      UserMigratedEvent.OutputObject
    >;
    UserMigrated: TypedContractEvent<
      UserMigratedEvent.InputTuple,
      UserMigratedEvent.OutputTuple,
      UserMigratedEvent.OutputObject
    >;
  };
}
