/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "lpHolderBalance"
      | "lpToPair"
      | "onLPTransfer"
      | "pairs"
      | "removeLiquidity"
      | "swap"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LiquidityAdded" | "LiquidityRemoved" | "Swapped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpHolderBalance",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onLPTransfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpHolderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onLPTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    provider: AddressLike,
    tokenA: AddressLike,
    tokenB: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    lp: AddressLike
  ];
  export type OutputTuple = [
    provider: string,
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint,
    lp: string
  ];
  export interface OutputObject {
    provider: string;
    tokenA: string;
    tokenB: string;
    amountA: bigint;
    amountB: bigint;
    lp: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    provider: AddressLike,
    tokenA: AddressLike,
    tokenB: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    lp: AddressLike
  ];
  export type OutputTuple = [
    provider: string,
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint,
    lp: string
  ];
  export interface OutputObject {
    provider: string;
    tokenA: string;
    tokenB: string;
    amountA: bigint;
    amountB: bigint;
    lp: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedEvent {
  export type InputTuple = [
    user: AddressLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    fromToken: string,
    toToken: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    fromToken: string;
    toToken: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockDEX extends BaseContract {
  connect(runner?: ContractRunner | null): MockDEX;
  waitForDeployment(): Promise<this>;

  interface: MockDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountA: BigNumberish,
      amountB: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  lpHolderBalance: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  lpToPair: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  onLPTransfer: TypedContractMethod<
    [
      lpAddr: AddressLike,
      from: AddressLike,
      to: AddressLike,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pairs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint] & {
        token0: string;
        token1: string;
        lp: string;
        reserve0: bigint;
        reserve1: bigint;
      }
    ],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, lpAmount: BigNumberish],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, amountIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountA: BigNumberish,
      amountB: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lpHolderBalance"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpToPair"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "onLPTransfer"
  ): TypedContractMethod<
    [
      lpAddr: AddressLike,
      from: AddressLike,
      to: AddressLike,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pairs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint] & {
        token0: string;
        token1: string;
        lp: string;
        reserve0: bigint;
        reserve1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, lpAmount: BigNumberish],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, amountIn: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Swapped"
  ): TypedContractEvent<
    SwappedEvent.InputTuple,
    SwappedEvent.OutputTuple,
    SwappedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,address,address,uint256,uint256,address)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,address,address,uint256,uint256,address)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "Swapped(address,address,address,uint256,uint256)": TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
    Swapped: TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
  };
}
