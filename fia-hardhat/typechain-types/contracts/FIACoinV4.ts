/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FIACoinV4Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_CHANGE_DELAY"
      | "MAX_TOTAL_FEE_BP"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "calculateTransferAmounts"
      | "decimals"
      | "emergencyPause"
      | "emergencyUnpause"
      | "feeToBurnBP"
      | "feeToFounderBP"
      | "feeToTreasuryBP"
      | "founderWallet"
      | "getFeeBreakdown"
      | "isFeeExempt"
      | "lastFeeChange"
      | "name"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setFeeDistribution"
      | "setFeeExempt"
      | "setTotalFeeBP"
      | "symbol"
      | "totalFeeBP"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "EmergencyAction"
      | "FeeConfigurationChanged"
      | "FeeDistributionChanged"
      | "FeeExemptionSet"
      | "Fingered"
      | "OwnershipTransferred"
      | "Paused"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_CHANGE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOTAL_FEE_BP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculateTransferAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToBurnBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToFounderBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToTreasuryBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "founderWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBreakdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeExempt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistribution",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalFeeBP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFeeBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_CHANGE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_FEE_BP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTransferAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToBurnBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToFounderBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToTreasuryBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalFeeBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFeeBP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyActionEvent {
  export type InputTuple = [action: string, actor: AddressLike];
  export type OutputTuple = [action: string, actor: string];
  export interface OutputObject {
    action: string;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeConfigurationChangedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDistributionChangedEvent {
  export type InputTuple = [
    treasury: BigNumberish,
    founder: BigNumberish,
    burn: BigNumberish
  ];
  export type OutputTuple = [treasury: bigint, founder: bigint, burn: bigint];
  export interface OutputObject {
    treasury: bigint;
    founder: bigint;
    burn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeExemptionSetEvent {
  export type InputTuple = [account: AddressLike, exempt: boolean];
  export type OutputTuple = [account: string, exempt: boolean];
  export interface OutputObject {
    account: string;
    exempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FingeredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FIACoinV4 extends BaseContract {
  connect(runner?: ContractRunner | null): FIACoinV4;
  waitForDeployment(): Promise<this>;

  interface: FIACoinV4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_CHANGE_DELAY: TypedContractMethod<[], [bigint], "view">;

  MAX_TOTAL_FEE_BP: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  calculateTransferAmounts: TypedContractMethod<
    [amount: BigNumberish],
    [[bigint, bigint] & { received: bigint; fees: bigint }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  feeToBurnBP: TypedContractMethod<[], [bigint], "view">;

  feeToFounderBP: TypedContractMethod<[], [bigint], "view">;

  feeToTreasuryBP: TypedContractMethod<[], [bigint], "view">;

  founderWallet: TypedContractMethod<[], [string], "view">;

  getFeeBreakdown: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        total: bigint;
        treasury: bigint;
        founder: bigint;
        burn: bigint;
      }
    ],
    "view"
  >;

  isFeeExempt: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastFeeChange: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeDistribution: TypedContractMethod<
    [_treasury: BigNumberish, _founder: BigNumberish, _burn: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeExempt: TypedContractMethod<
    [account: AddressLike, exempt: boolean],
    [void],
    "nonpayable"
  >;

  setTotalFeeBP: TypedContractMethod<
    [_totalFeeBP: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalFeeBP: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_CHANGE_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TOTAL_FEE_BP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateTransferAmounts"
  ): TypedContractMethod<
    [amount: BigNumberish],
    [[bigint, bigint] & { received: bigint; fees: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeToBurnBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeToFounderBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeToTreasuryBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "founderWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeBreakdown"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        total: bigint;
        treasury: bigint;
        founder: bigint;
        burn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFeeExempt"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastFeeChange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeDistribution"
  ): TypedContractMethod<
    [_treasury: BigNumberish, _founder: BigNumberish, _burn: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeExempt"
  ): TypedContractMethod<
    [account: AddressLike, exempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTotalFeeBP"
  ): TypedContractMethod<[_totalFeeBP: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalFeeBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAction"
  ): TypedContractEvent<
    EmergencyActionEvent.InputTuple,
    EmergencyActionEvent.OutputTuple,
    EmergencyActionEvent.OutputObject
  >;
  getEvent(
    key: "FeeConfigurationChanged"
  ): TypedContractEvent<
    FeeConfigurationChangedEvent.InputTuple,
    FeeConfigurationChangedEvent.OutputTuple,
    FeeConfigurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeDistributionChanged"
  ): TypedContractEvent<
    FeeDistributionChangedEvent.InputTuple,
    FeeDistributionChangedEvent.OutputTuple,
    FeeDistributionChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeExemptionSet"
  ): TypedContractEvent<
    FeeExemptionSetEvent.InputTuple,
    FeeExemptionSetEvent.OutputTuple,
    FeeExemptionSetEvent.OutputObject
  >;
  getEvent(
    key: "Fingered"
  ): TypedContractEvent<
    FingeredEvent.InputTuple,
    FingeredEvent.OutputTuple,
    FingeredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "EmergencyAction(string,address)": TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;
    EmergencyAction: TypedContractEvent<
      EmergencyActionEvent.InputTuple,
      EmergencyActionEvent.OutputTuple,
      EmergencyActionEvent.OutputObject
    >;

    "FeeConfigurationChanged(uint256,uint256)": TypedContractEvent<
      FeeConfigurationChangedEvent.InputTuple,
      FeeConfigurationChangedEvent.OutputTuple,
      FeeConfigurationChangedEvent.OutputObject
    >;
    FeeConfigurationChanged: TypedContractEvent<
      FeeConfigurationChangedEvent.InputTuple,
      FeeConfigurationChangedEvent.OutputTuple,
      FeeConfigurationChangedEvent.OutputObject
    >;

    "FeeDistributionChanged(uint256,uint256,uint256)": TypedContractEvent<
      FeeDistributionChangedEvent.InputTuple,
      FeeDistributionChangedEvent.OutputTuple,
      FeeDistributionChangedEvent.OutputObject
    >;
    FeeDistributionChanged: TypedContractEvent<
      FeeDistributionChangedEvent.InputTuple,
      FeeDistributionChangedEvent.OutputTuple,
      FeeDistributionChangedEvent.OutputObject
    >;

    "FeeExemptionSet(address,bool)": TypedContractEvent<
      FeeExemptionSetEvent.InputTuple,
      FeeExemptionSetEvent.OutputTuple,
      FeeExemptionSetEvent.OutputObject
    >;
    FeeExemptionSet: TypedContractEvent<
      FeeExemptionSetEvent.InputTuple,
      FeeExemptionSetEvent.OutputTuple,
      FeeExemptionSetEvent.OutputObject
    >;

    "Fingered(address,address,uint256)": TypedContractEvent<
      FingeredEvent.InputTuple,
      FingeredEvent.OutputTuple,
      FingeredEvent.OutputObject
    >;
    Fingered: TypedContractEvent<
      FingeredEvent.InputTuple,
      FingeredEvent.OutputTuple,
      FingeredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
