/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SimpleMultiSigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmTransaction"
      | "executeTransaction"
      | "isConfirmed"
      | "isOwner"
      | "owners"
      | "required"
      | "submitTransaction"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Confirm" | "Execute" | "Submit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace ConfirmEvent {
  export type InputTuple = [owner: AddressLike, txId: BigNumberish];
  export type OutputTuple = [owner: string, txId: bigint];
  export interface OutputObject {
    owner: string;
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteEvent {
  export type InputTuple = [txId: BigNumberish];
  export type OutputTuple = [txId: bigint];
  export interface OutputObject {
    txId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitEvent {
  export type InputTuple = [
    txId: BigNumberish,
    proposer: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    txId: bigint,
    proposer: string,
    to: string,
    value: bigint
  ];
  export interface OutputObject {
    txId: bigint;
    proposer: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleMultiSig extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleMultiSig;
  waitForDeployment(): Promise<this>;

  interface: SimpleMultiSigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  confirmTransaction: TypedContractMethod<
    [txId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransaction: TypedContractMethod<
    [txId: BigNumberish],
    [void],
    "nonpayable"
  >;

  isConfirmed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  required: TypedContractMethod<[], [bigint], "view">;

  submitTransaction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        confirmations: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isConfirmed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "required"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        confirmations: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Confirm"
  ): TypedContractEvent<
    ConfirmEvent.InputTuple,
    ConfirmEvent.OutputTuple,
    ConfirmEvent.OutputObject
  >;
  getEvent(
    key: "Execute"
  ): TypedContractEvent<
    ExecuteEvent.InputTuple,
    ExecuteEvent.OutputTuple,
    ExecuteEvent.OutputObject
  >;
  getEvent(
    key: "Submit"
  ): TypedContractEvent<
    SubmitEvent.InputTuple,
    SubmitEvent.OutputTuple,
    SubmitEvent.OutputObject
  >;

  filters: {
    "Confirm(address,uint256)": TypedContractEvent<
      ConfirmEvent.InputTuple,
      ConfirmEvent.OutputTuple,
      ConfirmEvent.OutputObject
    >;
    Confirm: TypedContractEvent<
      ConfirmEvent.InputTuple,
      ConfirmEvent.OutputTuple,
      ConfirmEvent.OutputObject
    >;

    "Execute(uint256)": TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;
    Execute: TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >;

    "Submit(uint256,address,address,uint256)": TypedContractEvent<
      SubmitEvent.InputTuple,
      SubmitEvent.OutputTuple,
      SubmitEvent.OutputObject
    >;
    Submit: TypedContractEvent<
      SubmitEvent.InputTuple,
      SubmitEvent.OutputTuple,
      SubmitEvent.OutputObject
    >;
  };
}
