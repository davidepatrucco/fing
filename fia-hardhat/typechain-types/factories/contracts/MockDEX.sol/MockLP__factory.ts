/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockLP,
  MockLPInterface,
} from "../../../contracts/MockDEX.sol/MockLP";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620018f7380380620018f7833981810160405281019062000037919062000276565b818181600390816200004a919062000546565b5080600490816200005c919062000546565b5050506200007b67bab7077bc8605f5a60c01b620000e060201b60201c565b6200009767ca9fbccdb5b35cad60c01b620000e060201b60201c565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200062d565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200014c8262000101565b810181811067ffffffffffffffff821117156200016e576200016d62000112565b5b80604052505050565b600062000183620000e3565b905062000191828262000141565b919050565b600067ffffffffffffffff821115620001b457620001b362000112565b5b620001bf8262000101565b9050602081019050919050565b60005b83811015620001ec578082015181840152602081019050620001cf565b60008484015250505050565b60006200020f620002098462000196565b62000177565b9050828152602081018484840111156200022e576200022d620000fc565b5b6200023b848285620001cc565b509392505050565b600082601f8301126200025b576200025a620000f7565b5b81516200026d848260208601620001f8565b91505092915050565b6000806040838503121562000290576200028f620000ed565b5b600083015167ffffffffffffffff811115620002b157620002b0620000f2565b5b620002bf8582860162000243565b925050602083015167ffffffffffffffff811115620002e357620002e2620000f2565b5b620002f18582860162000243565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034e57607f821691505b60208210810362000364576200036362000306565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003ce7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200038f565b620003da86836200038f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000427620004216200041b84620003f2565b620003fc565b620003f2565b9050919050565b6000819050919050565b620004438362000406565b6200045b62000452826200042e565b8484546200039c565b825550505050565b600090565b6200047262000463565b6200047f81848462000438565b505050565b5b81811015620004a7576200049b60008262000468565b60018101905062000485565b5050565b601f821115620004f657620004c0816200036a565b620004cb846200037f565b81016020851015620004db578190505b620004f3620004ea856200037f565b83018262000484565b50505b505050565b600082821c905092915050565b60006200051b60001984600802620004fb565b1980831691505092915050565b600062000536838362000508565b9150826002028217905092915050565b6200055182620002fb565b67ffffffffffffffff8111156200056d576200056c62000112565b5b62000579825462000335565b62000586828285620004ab565b600060209050601f831160018114620005be5760008415620005a9578287015190505b620005b5858262000528565b86555062000625565b601f198416620005ce866200036a565b60005b82811015620005f857848901518255600182019150602085019450602081019050620005d1565b8683101562000618578489015162000614601f89168262000508565b8355505b6001600288020188555050505b505050505050565b6112ba806200063d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461019157806370a08231146101ad57806395d89b41146101dd5780639dc29fac146101fb578063a9059cbb14610217578063dd62ed3e14610247576100b4565b806306fdde03146100b957806307546172146100d7578063095ea7b3146100f557806318160ddd1461012557806323b872dd14610143578063313ce56714610173575b600080fd5b6100c1610277565b6040516100ce9190610ea2565b60405180910390f35b6100df610309565b6040516100ec9190610f05565b60405180910390f35b61010f600480360381019061010a9190610f87565b61032f565b60405161011c9190610fe2565b60405180910390f35b61012d610352565b60405161013a919061100c565b60405180910390f35b61015d60048036038101906101589190611027565b61035c565b60405161016a9190610fe2565b60405180910390f35b61017b61038b565b6040516101889190611096565b60405180910390f35b6101ab60048036038101906101a69190610f87565b610394565b005b6101c760048036038101906101c291906110b1565b6104be565b6040516101d4919061100c565b60405180910390f35b6101e5610506565b6040516101f29190610ea2565b60405180910390f35b61021560048036038101906102109190610f87565b610598565b005b610231600480360381019061022c9190610f87565b6106c2565b60405161023e9190610fe2565b60405180910390f35b610261600480360381019061025c91906110de565b6106e5565b60405161026e919061100c565b60405180910390f35b6060600380546102869061114d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b29061114d565b80156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b5050505050905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061033a61076c565b9050610347818585610774565b600191505092915050565b6000600254905090565b60008061036761076c565b9050610374858285610786565b61037f85858561081b565b60019150509392505050565b60006012905090565b6103a867b34d725f0b1edc8960c01b61090f565b6103bc676d252c66aeb2847160c01b61090f565b6103d06781010e05bed5583c60c01b61090f565b6103e46722748ed67c7365e960c01b61090f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b906111ca565b60405180910390fd5b61048867d89e909af6b768c660c01b61090f565b61049c6768d0cb51686d897e60c01b61090f565b6104b0675e8a479f0d3f6ebc60c01b61090f565b6104ba8282610912565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105159061114d565b80601f01602080910402602001604051908101604052809291908181526020018280546105419061114d565b801561058e5780601f106105635761010080835404028352916020019161058e565b820191906000526020600020905b81548152906001019060200180831161057157829003601f168201915b5050505050905090565b6105ac67984675c508210ad160c01b61090f565b6105c067c3bc1631a77ffaa660c01b61090f565b6105d46705019e2b59d3e31e60c01b61090f565b6105e867abc9a41ecc39a9fc60c01b61090f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f906111ca565b60405180910390fd5b61068c6726fc927db856869360c01b61090f565b6106a0672edaa4e2c873bc7c60c01b61090f565b6106b467616c2b387273641b60c01b61090f565b6106be8282610994565b5050565b6000806106cd61076c565b90506106da81858561081b565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6107818383836001610a16565b505050565b600061079284846106e5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156108155781811015610805578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016107fc939291906111ea565b60405180910390fd5b61081484848484036000610a16565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016108849190610f05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108ff5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108f69190610f05565b60405180910390fd5b61090a838383610bed565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161097b9190610f05565b60405180910390fd5b61099060008383610bed565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a065760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109fd9190610f05565b60405180910390fd5b610a1282600083610bed565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a885760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a7f9190610f05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610afa5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610af19190610f05565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610be7578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610bde919061100c565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c3f578060026000828254610c339190611250565b92505081905550610d12565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ccb578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610cc2939291906111ea565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d5b5780600260008282540392505081905550610da8565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e05919061100c565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4c578082015181840152602081019050610e31565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7482610e12565b610e7e8185610e1d565b9350610e8e818560208601610e2e565b610e9781610e58565b840191505092915050565b60006020820190508181036000830152610ebc8184610e69565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eef82610ec4565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b600080fd5b610f2e81610ee4565b8114610f3957600080fd5b50565b600081359050610f4b81610f25565b92915050565b6000819050919050565b610f6481610f51565b8114610f6f57600080fd5b50565b600081359050610f8181610f5b565b92915050565b60008060408385031215610f9e57610f9d610f20565b5b6000610fac85828601610f3c565b9250506020610fbd85828601610f72565b9150509250929050565b60008115159050919050565b610fdc81610fc7565b82525050565b6000602082019050610ff76000830184610fd3565b92915050565b61100681610f51565b82525050565b60006020820190506110216000830184610ffd565b92915050565b6000806000606084860312156110405761103f610f20565b5b600061104e86828701610f3c565b935050602061105f86828701610f3c565b925050604061107086828701610f72565b9150509250925092565b600060ff82169050919050565b6110908161107a565b82525050565b60006020820190506110ab6000830184611087565b92915050565b6000602082840312156110c7576110c6610f20565b5b60006110d584828501610f3c565b91505092915050565b600080604083850312156110f5576110f4610f20565b5b600061110385828601610f3c565b925050602061111485828601610f3c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061116557607f821691505b6020821081036111785761117761111e565b5b50919050565b7f4f6e6c79206d696e746572000000000000000000000000000000000000000000600082015250565b60006111b4600b83610e1d565b91506111bf8261117e565b602082019050919050565b600060208201905081810360008301526111e3816111a7565b9050919050565b60006060820190506111ff6000830186610ef6565b61120c6020830185610ffd565b6112196040830184610ffd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061125b82610f51565b915061126683610f51565b925082820190508082111561127e5761127d611221565b5b9291505056fea2646970667358221220515edf390451276e1d9407a40e2a0cc10bdbe55222930792a1412a112f4e31be64736f6c63430008140033";

type MockLPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLP__factory extends ContractFactory {
  constructor(...args: MockLPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, overrides || {}) as Promise<
      MockLP & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockLP__factory {
    return super.connect(runner) as MockLP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLPInterface {
    return new Interface(_abi) as MockLPInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockLP {
    return new Contract(address, _abi, runner) as unknown as MockLP;
  }
}
