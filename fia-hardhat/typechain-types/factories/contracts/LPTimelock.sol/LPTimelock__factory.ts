/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LPTimelock,
  LPTimelockInterface,
} from "../../../contracts/LPTimelock.sol/LPTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lp",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_unlockTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lp",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161058f38038061058f83398101604081905261002f91610058565b600080546001600160a01b031916331790556001600160a01b039190911660805260a052610092565b6000806040838503121561006b57600080fd5b82516001600160a01b038116811461008257600080fd5b6020939093015192949293505050565b60805160a0516104be6100d16000396000818160610152610152015260008181609b015281816101c101528181610260015261037601526104be6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063251c1aa31461005c578063313c06a0146100965780633ccfd60b146100d55780638da5cb5b146100df578063b6b55f25146100f2575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100bd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008d565b6100dd610105565b005b6000546100bd906001600160a01b031681565b6100dd61010036600461042d565b61030e565b6000546001600160a01b031633146101505760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004210156101a95760405162461bcd60e51b81526020600482015260066024820152651b1bd8dad95960d21b6044820152606401610147565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102349190610446565b60005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd919061045f565b61030b5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610147565b50565b6000546001600160a01b031633146103545760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610147565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb919061045f565b61030b5760405162461bcd60e51b81526020600482015260136024820152721d1c985b9cd9995c919c9bdb4819985a5b1959606a1b6044820152606401610147565b60006020828403121561043f57600080fd5b5035919050565b60006020828403121561045857600080fd5b5051919050565b60006020828403121561047157600080fd5b8151801515811461048157600080fd5b939250505056fea264697066735822122092dd61d58df2e22b27eba02ded9844f57133c945da4f8b6b836c112ecf12ff7e64736f6c63430008140033";

type LPTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPTimelock__factory extends ContractFactory {
  constructor(...args: LPTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _lp: AddressLike,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_lp, _unlockTime, overrides || {});
  }
  override deploy(
    _lp: AddressLike,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_lp, _unlockTime, overrides || {}) as Promise<
      LPTimelock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LPTimelock__factory {
    return super.connect(runner) as LPTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPTimelockInterface {
    return new Interface(_abi) as LPTimelockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LPTimelock {
    return new Contract(address, _abi, runner) as unknown as LPTimelock;
  }
}
