/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LPTimelock,
  LPTimelockInterface,
} from "../../../contracts/LPTimelock.sol/LPTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lp",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_unlockTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lp",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162000deb38038062000deb8339818101604052810190620000379190620001d3565b620000536754987a0ac87cd26760c01b6200012b60201b60201c565b6200006f6704fb7479b5fab93160c01b6200012b60201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000cb67a0113691f8e43f6160c01b6200012b60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506200011b67ef546f474ea9cb6860c01b6200012b60201b60201c565b8060a0818152505050506200021a565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b60008060408385031215620001ed57620001ec6200012e565b5b6000620001fd8582860162000181565b92505060206200021085828601620001bc565b9150509250929050565b60805160a051610b906200025b6000396000818160de0152610254015260008181610102015281816102f5015281816103cd01526106330152610b906000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063251c1aa31461005c578063313c06a01461007a5780633ccfd60b146100985780638da5cb5b146100a2578063b6b55f25146100c0575b600080fd5b6100646100dc565b6040516100719190610743565b60405180910390f35b610082610100565b60405161008f91906107dd565b60405180910390f35b6100a0610124565b005b6100aa6104df565b6040516100b79190610819565b60405180910390f35b6100da60048036038101906100d59190610865565b610503565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61013867fff1c88c19ad8b2e60c01b610727565b61014c672fc476b5989b558160c01b610727565b6101606738cb84d0b539bffa60c01b610727565b61017467d22857f805addcb660c01b610727565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f9906108ef565b60405180910390fd5b610216673f87926b88d620f060c01b610727565b61022a67ffe00b80b3b9bd1a60c01b610727565b61023e67ea3259e210b5152d60c01b610727565b61025267a43edd3c8680631760c01b610727565b7f00000000000000000000000000000000000000000000000000000000000000004210156102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac9061095b565b60405180910390fd5b6102c967037d2a25ccfd7c9860c01b610727565b6102dd67e70eb3d8a833d81560c01b610727565b6102f1671ec8fc6c6c82ab6a60c01b610727565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161034c9190610819565b602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190610990565b90506103a36766d023cdef2fb2b660c01b610727565b6103b767f4489c339306804060c01b610727565b6103cb6764091a403219361660c01b610727565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016104469291906109bd565b6020604051808303816000875af1158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190610a1e565b6104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90610a97565b60405180910390fd5b6104dc67f3b30e15c5177d4b60c01b610727565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61051767a704bfc04885baba60c01b610727565b61052b67765d882a1f3abfb660c01b610727565b61053f6735b4e24b049ed84160c01b610727565b61055367bea84b4afe918e9a60c01b610727565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d8906108ef565b60405180910390fd5b6105f567a3e745be55750df460c01b610727565b61060967d16c900323f44d5e60c01b610727565b61061d677197273a600022f360c01b610727565b61063167740f3ad105e3524460c01b610727565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161068e93929190610ab7565b6020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190610a1e565b610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790610b3a565b60405180910390fd5b61072467e4c190e55b164eab60c01b610727565b50565b50565b6000819050919050565b61073d8161072a565b82525050565b60006020820190506107586000830184610734565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107a361079e6107998461075e565b61077e565b61075e565b9050919050565b60006107b582610788565b9050919050565b60006107c7826107aa565b9050919050565b6107d7816107bc565b82525050565b60006020820190506107f260008301846107ce565b92915050565b60006108038261075e565b9050919050565b610813816107f8565b82525050565b600060208201905061082e600083018461080a565b92915050565b600080fd5b6108428161072a565b811461084d57600080fd5b50565b60008135905061085f81610839565b92915050565b60006020828403121561087b5761087a610834565b5b600061088984828501610850565b91505092915050565b600082825260208201905092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006108d9600983610892565b91506108e4826108a3565b602082019050919050565b60006020820190508181036000830152610908816108cc565b9050919050565b7f6c6f636b65640000000000000000000000000000000000000000000000000000600082015250565b6000610945600683610892565b91506109508261090f565b602082019050919050565b6000602082019050818103600083015261097481610938565b9050919050565b60008151905061098a81610839565b92915050565b6000602082840312156109a6576109a5610834565b5b60006109b48482850161097b565b91505092915050565b60006040820190506109d2600083018561080a565b6109df6020830184610734565b9392505050565b60008115159050919050565b6109fb816109e6565b8114610a0657600080fd5b50565b600081519050610a18816109f2565b92915050565b600060208284031215610a3457610a33610834565b5b6000610a4284828501610a09565b91505092915050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610a81600f83610892565b9150610a8c82610a4b565b602082019050919050565b60006020820190508181036000830152610ab081610a74565b9050919050565b6000606082019050610acc600083018661080a565b610ad9602083018561080a565b610ae66040830184610734565b949350505050565b7f7472616e7366657246726f6d206661696c656400000000000000000000000000600082015250565b6000610b24601383610892565b9150610b2f82610aee565b602082019050919050565b60006020820190508181036000830152610b5381610b17565b905091905056fea2646970667358221220c0cd4d282aec669801918788d597c9a9ed013a17b9df051e838b6879c85d93ef64736f6c63430008140033";

type LPTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPTimelock__factory extends ContractFactory {
  constructor(...args: LPTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _lp: AddressLike,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_lp, _unlockTime, overrides || {});
  }
  override deploy(
    _lp: AddressLike,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_lp, _unlockTime, overrides || {}) as Promise<
      LPTimelock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LPTimelock__factory {
    return super.connect(runner) as LPTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPTimelockInterface {
    return new Interface(_abi) as LPTimelockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LPTimelock {
    return new Contract(address, _abi, runner) as unknown as LPTimelock;
  }
}
