/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockToken, MockTokenInterface } from "../../contracts/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initial",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a3238038062001a328339818101604052810190620000379190620005dd565b828281600390816200004a9190620008b8565b5080600490816200005c9190620008b8565b5050506200007b67195c1185c7f191f160c01b6200014f60201b60201c565b62000097673771236d76fcaeca60c01b6200014f60201b60201c565b620000b36717183e7a89d4de5d60c01b6200014f60201b60201c565b60008111156200012957620000d9674816a3195c71e97960c01b6200014f60201b60201c565b620000f567fb37fd4fa68bfa1860c01b6200014f60201b60201c565b62000111671b7cd4c3b6786d2a60c01b6200014f60201b60201c565b6200012333826200015260201b60201c565b62000146565b6200014567869a9aed7fcc5f0360c01b6200014f60201b60201c565b5b50505062000ad6565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001c75760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620001be9190620009e4565b60405180910390fd5b620001db60008383620001df60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200023557806002600082825462000228919062000a30565b925050819055506200030b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015620002c4578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401620002bb9392919062000a7c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003565780600260008282540392505081905550620003a3565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000402919062000ab9565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000478826200042d565b810181811067ffffffffffffffff821117156200049a57620004996200043e565b5b80604052505050565b6000620004af6200040f565b9050620004bd82826200046d565b919050565b600067ffffffffffffffff821115620004e057620004df6200043e565b5b620004eb826200042d565b9050602081019050919050565b60005b8381101562000518578082015181840152602081019050620004fb565b60008484015250505050565b60006200053b6200053584620004c2565b620004a3565b9050828152602081018484840111156200055a576200055962000428565b5b62000567848285620004f8565b509392505050565b600082601f83011262000587576200058662000423565b5b81516200059984826020860162000524565b91505092915050565b6000819050919050565b620005b781620005a2565b8114620005c357600080fd5b50565b600081519050620005d781620005ac565b92915050565b600080600060608486031215620005f957620005f862000419565b5b600084015167ffffffffffffffff8111156200061a57620006196200041e565b5b62000628868287016200056f565b935050602084015167ffffffffffffffff8111156200064c576200064b6200041e565b5b6200065a868287016200056f565b92505060406200066d86828701620005c6565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006ca57607f821691505b602082108103620006e057620006df62000682565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200074a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200070b565b6200075686836200070b565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000799620007936200078d84620005a2565b6200076e565b620005a2565b9050919050565b6000819050919050565b620007b58362000778565b620007cd620007c482620007a0565b84845462000718565b825550505050565b600090565b620007e4620007d5565b620007f1818484620007aa565b505050565b5b8181101562000819576200080d600082620007da565b600181019050620007f7565b5050565b601f82111562000868576200083281620006e6565b6200083d84620006fb565b810160208510156200084d578190505b620008656200085c85620006fb565b830182620007f6565b50505b505050565b600082821c905092915050565b60006200088d600019846008026200086d565b1980831691505092915050565b6000620008a883836200087a565b9150826002028217905092915050565b620008c38262000677565b67ffffffffffffffff811115620008df57620008de6200043e565b5b620008eb8254620006b1565b620008f88282856200081d565b600060209050601f8311600181146200093057600084156200091b578287015190505b6200092785826200089a565b86555062000997565b601f1984166200094086620006e6565b60005b828110156200096a5784890151825560018201915060208501945060208101905062000943565b868310156200098a578489015162000986601f8916826200087a565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009cc826200099f565b9050919050565b620009de81620009bf565b82525050565b6000602082019050620009fb6000830184620009d3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000a3d82620005a2565b915062000a4a83620005a2565b925082820190508082111562000a655762000a6462000a01565b5b92915050565b62000a7681620005a2565b82525050565b600060608201905062000a936000830186620009d3565b62000aa2602083018562000a6b565b62000ab1604083018462000a6b565b949350505050565b600060208201905062000ad0600083018462000a6b565b92915050565b610f4c8062000ae66000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610ba0565b60405180910390f35b6100db60048036038101906100d69190610c5b565b6102b9565b6040516100e89190610cb6565b60405180910390f35b6100f96102dc565b6040516101069190610ce0565b60405180910390f35b61012960048036038101906101249190610cfb565b6102e6565b6040516101369190610cb6565b60405180910390f35b610147610315565b6040516101549190610d6a565b60405180910390f35b61017760048036038101906101729190610c5b565b61031e565b005b610193600480360381019061018e9190610d85565b610368565b6040516101a09190610ce0565b60405180910390f35b6101b16103b0565b6040516101be9190610ba0565b60405180910390f35b6101e160048036038101906101dc9190610c5b565b610442565b6040516101ee9190610cb6565b60405180910390f35b610211600480360381019061020c9190610db2565b610465565b60405161021e9190610ce0565b60405180910390f35b60606003805461023690610e21565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610e21565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000806102c46104ec565b90506102d18185856104f4565b600191505092915050565b6000600254905090565b6000806102f16104ec565b90506102fe858285610506565b61030985858561059b565b60019150509392505050565b60006012905090565b61033267ad35f05e7dc0b55260c01b61068f565b61034667f0627edb0b4b2be060c01b61068f565b61035a67f1211176d3403c3860c01b61068f565b6103648282610692565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103bf90610e21565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb90610e21565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050905090565b60008061044d6104ec565b905061045a81858561059b565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6105018383836001610714565b505050565b60006105128484610465565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156105955781811015610585578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161057c93929190610e61565b60405180910390fd5b61059484848484036000610714565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361060d5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106049190610e98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361067f5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106769190610e98565b60405180910390fd5b61068a8383836108eb565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107045760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106fb9190610e98565b60405180910390fd5b610710600083836108eb565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107865760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161077d9190610e98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107f85760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016107ef9190610e98565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156108e5578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108dc9190610ce0565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361093d5780600260008282546109319190610ee2565b92505081905550610a10565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109c9578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016109c093929190610e61565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a595780600260008282540392505081905550610aa6565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b039190610ce0565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b4a578082015181840152602081019050610b2f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b7282610b10565b610b7c8185610b1b565b9350610b8c818560208601610b2c565b610b9581610b56565b840191505092915050565b60006020820190508181036000830152610bba8184610b67565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf282610bc7565b9050919050565b610c0281610be7565b8114610c0d57600080fd5b50565b600081359050610c1f81610bf9565b92915050565b6000819050919050565b610c3881610c25565b8114610c4357600080fd5b50565b600081359050610c5581610c2f565b92915050565b60008060408385031215610c7257610c71610bc2565b5b6000610c8085828601610c10565b9250506020610c9185828601610c46565b9150509250929050565b60008115159050919050565b610cb081610c9b565b82525050565b6000602082019050610ccb6000830184610ca7565b92915050565b610cda81610c25565b82525050565b6000602082019050610cf56000830184610cd1565b92915050565b600080600060608486031215610d1457610d13610bc2565b5b6000610d2286828701610c10565b9350506020610d3386828701610c10565b9250506040610d4486828701610c46565b9150509250925092565b600060ff82169050919050565b610d6481610d4e565b82525050565b6000602082019050610d7f6000830184610d5b565b92915050565b600060208284031215610d9b57610d9a610bc2565b5b6000610da984828501610c10565b91505092915050565b60008060408385031215610dc957610dc8610bc2565b5b6000610dd785828601610c10565b9250506020610de885828601610c10565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e3957607f821691505b602082108103610e4c57610e4b610df2565b5b50919050565b610e5b81610be7565b82525050565b6000606082019050610e766000830186610e52565b610e836020830185610cd1565b610e906040830184610cd1565b949350505050565b6000602082019050610ead6000830184610e52565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eed82610c25565b9150610ef883610c25565b9250828201905080821115610f1057610f0f610eb3565b5b9291505056fea2646970667358221220ec2af720e4ef493e49ecb2732f1f85873745dba990c78a58ed8ae795fe80544764736f6c63430008140033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    initial: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, initial, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    initial: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, initial, overrides || {}) as Promise<
      MockToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockToken__factory {
    return super.connect(runner) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockToken {
    return new Contract(address, _abi, runner) as unknown as MockToken;
  }
}
