/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestCaller,
  TestCallerInterface,
} from "../../../contracts/TestCaller.sol/TestCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonce1",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonce2",
        type: "uint256",
      },
    ],
    name: "callTwo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610524806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639d01d80c14610030575b600080fd5b61004a6004803603810190610045919061035a565b610061565b604051610058929190610417565b60405180910390f35b600080610078675a0fde95e0b5167e60c01b6102be565b61008c67f96ec1e8880e56bb60c01b6102be565b6100a067ec478eeb113cf11960c01b6102be565b60006100b667c820e6aaf7fbf6dc60c01b6102be565b6100ca67cd1c6052b19a821c60c01b6102be565b60006100e0672e65764750d20b9860c01b6102be565b6100f467f46d3f0205c0561c60c01b6102be565b8a73ffffffffffffffffffffffffffffffffffffffff16638893002f8b8b8b6040518463ffffffff1660e01b81526004016101319392919061045e565b6020604051808303816000875af192505050801561016d57506040513d601f19601f8201168201806040525081019061016a91906104c1565b60015b61018e57610185676d7b5ccde11b178960c01b6102be565b600091506101a7565b6101a2675efc92060642114460c01b6102be565b809250505b6101bb674080794710b375b960c01b6102be565b6101cf67fb6ef851b29c47a760c01b6102be565b8a73ffffffffffffffffffffffffffffffffffffffff16638893002f8888886040518463ffffffff1660e01b815260040161020c9392919061045e565b6020604051808303816000875af192505050801561024857506040513d601f19601f8201168201806040525081019061024591906104c1565b60015b6102695761026067a3a2dda158b0d82e60c01b6102be565b60009050610282565b61027d672ab7196888c62c6660c01b6102be565b809150505b610296673e289d6d3c17904860c01b6102be565b6102aa6754bb5aed3e7fb71f60c01b6102be565b818193509350505097509795505050505050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102f1826102c6565b9050919050565b610301816102e6565b811461030c57600080fd5b50565b60008135905061031e816102f8565b92915050565b6000819050919050565b61033781610324565b811461034257600080fd5b50565b6000813590506103548161032e565b92915050565b600080600080600080600060e0888a031215610379576103786102c1565b5b60006103878a828b0161030f565b97505060206103988a828b0161030f565b96505060406103a98a828b01610345565b95505060606103ba8a828b01610345565b94505060806103cb8a828b0161030f565b93505060a06103dc8a828b01610345565b92505060c06103ed8a828b01610345565b91505092959891949750929550565b60008115159050919050565b610411816103fc565b82525050565b600060408201905061042c6000830185610408565b6104396020830184610408565b9392505050565b610449816102e6565b82525050565b61045881610324565b82525050565b60006060820190506104736000830186610440565b610480602083018561044f565b61048d604083018461044f565b949350505050565b61049e816103fc565b81146104a957600080fd5b50565b6000815190506104bb81610495565b92915050565b6000602082840312156104d7576104d66102c1565b5b60006104e5848285016104ac565b9150509291505056fea2646970667358221220d4370ba0eb3a3e3c2ab4e587beb0e0868da554f456c2b5af2236a36e61dc42fa64736f6c63430008160033";

type TestCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCaller__factory extends ContractFactory {
  constructor(...args: TestCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestCaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestCaller__factory {
    return super.connect(runner) as TestCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCallerInterface {
    return new Interface(_abi) as TestCallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestCaller {
    return new Contract(address, _abi, runner) as unknown as TestCaller;
  }
}
