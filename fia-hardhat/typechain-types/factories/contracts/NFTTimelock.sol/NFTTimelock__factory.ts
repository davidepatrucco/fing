/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  NFTTimelock,
  NFTTimelockInterface,
} from "../../../contracts/NFTTimelock.sol/NFTTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlockTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516108e13803806108e1833981810160405281019061003291906101dc565b61004c67905f29ab81cf4e8b60c01b61014060201b60201c565b61006667477a2b0d62b59a4a60c01b61014060201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100c067f6b8e5f2654b3c1b60c01b61014060201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061010e675b95f5cc0116a70e60c01b61014060201b60201c565b8160a08181525050610130673430d766b481605c60c01b61014060201b60201c565b8060c0818152505050505061022f565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061017382610148565b9050919050565b61018381610168565b811461018e57600080fd5b50565b6000815190506101a08161017a565b92915050565b6000819050919050565b6101b9816101a6565b81146101c457600080fd5b50565b6000815190506101d6816101b0565b92915050565b6000806000606084860312156101f5576101f4610143565b5b600061020386828701610191565b9350506020610214868287016101c7565b9250506040610225868287016101c7565b9150509250925092565b60805160a05160c05161066f61027260003960008181610104015261025601526000818160e001526103530152600081816102f501526103c6015261066f6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806317d70f7c1461005c578063251c1aa31461007a5780633ccfd60b1461009857806347ccca02146100a25780638da5cb5b146100c0575b600080fd5b6100646100de565b6040516100719190610428565b60405180910390f35b610082610102565b60405161008f9190610428565b60405180910390f35b6100a0610126565b005b6100aa6103c4565b6040516100b791906104c2565b60405180910390f35b6100c86103e8565b6040516100d591906104fe565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61013a675533db9b1a4c75f760c01b61040c565b61014e67b6824c362c58542960c01b61040c565b610162675a7ce3cbbb9efca260c01b61040c565b610176671108cf73f89f546460c01b61040c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fb90610576565b60405180910390fd5b610218677019df7540766d5760c01b61040c565b61022c6733dc7b9328b712d560c01b61040c565b610240674abfb02eac14114860c01b61040c565b61025467b26e15a3b6f4e0e560c01b61040c565b7f00000000000000000000000000000000000000000000000000000000000000004210156102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae906105e2565b60405180910390fd5b6102cb67267735143032b23660c01b61040c565b6102df6721f6691bcd264ccd60c01b61040c565b6102f3673929f4ea4620861060c01b61040c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e3060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040161039093929190610602565b600060405180830381600087803b1580156103aa57600080fd5b505af11580156103be573d6000803e3d6000fd5b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b6000819050919050565b6104228161040f565b82525050565b600060208201905061043d6000830184610419565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061048861048361047e84610443565b610463565b610443565b9050919050565b600061049a8261046d565b9050919050565b60006104ac8261048f565b9050919050565b6104bc816104a1565b82525050565b60006020820190506104d760008301846104b3565b92915050565b60006104e882610443565b9050919050565b6104f8816104dd565b82525050565b600060208201905061051360008301846104ef565b92915050565b600082825260208201905092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000610560600983610519565b915061056b8261052a565b602082019050919050565b6000602082019050818103600083015261058f81610553565b9050919050565b7f6c6f636b65640000000000000000000000000000000000000000000000000000600082015250565b60006105cc600683610519565b91506105d782610596565b602082019050919050565b600060208201905081810360008301526105fb816105bf565b9050919050565b600060608201905061061760008301866104ef565b61062460208301856104ef565b6106316040830184610419565b94935050505056fea2646970667358221220d11af8676e264eceec54d1cd276dc5b28999ef86b8ac2a6e1b918502b674dc5e64736f6c63430008160033";

type NFTTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTTimelock__factory extends ContractFactory {
  constructor(...args: NFTTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _nft: AddressLike,
    _tokenId: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _nft,
      _tokenId,
      _unlockTime,
      overrides || {}
    );
  }
  override deploy(
    _nft: AddressLike,
    _tokenId: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _nft,
      _tokenId,
      _unlockTime,
      overrides || {}
    ) as Promise<
      NFTTimelock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): NFTTimelock__factory {
    return super.connect(runner) as NFTTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTTimelockInterface {
    return new Interface(_abi) as NFTTimelockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): NFTTimelock {
    return new Contract(address, _abi, runner) as unknown as NFTTimelock;
  }
}
