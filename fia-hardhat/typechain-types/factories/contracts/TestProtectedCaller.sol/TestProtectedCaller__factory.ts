/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestProtectedCaller,
  TestProtectedCallerInterface,
} from "../../../contracts/TestProtectedCaller.sol/TestProtectedCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "fia",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n2",
        type: "uint256",
      },
    ],
    name: "callTwice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fia",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "reuseNonceInOneTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806383c378ee1461003b578063fc6db7d614610057575b600080fd5b610055600480360381019061005091906103e8565b610073565b005b610071600480360381019061006c919061044f565b6101df565b005b61008767efc14b59460cd73260c01b61034c565b61009b67649f2562f0a9dc4060c01b61034c565b6100af677d764105f83016ee60c01b61034c565b8373ffffffffffffffffffffffffffffffffffffffff16638893002f8484846040518463ffffffff1660e01b81526004016100ec939291906104e8565b6020604051808303816000875af115801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f9190610557565b506101446786e6fcac114d854660c01b61034c565b6101586746910984c5ab78da60c01b61034c565b8373ffffffffffffffffffffffffffffffffffffffff16638893002f8484846040518463ffffffff1660e01b8152600401610195939291906104e8565b6020604051808303816000875af11580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d89190610557565b5050505050565b6101f367a36a5aac02c90f4860c01b61034c565b61020767d4a66fcd405e494c60c01b61034c565b61021b67e485689c42ecd4c160c01b61034c565b8473ffffffffffffffffffffffffffffffffffffffff16638893002f8585856040518463ffffffff1660e01b8152600401610258939291906104e8565b6020604051808303816000875af1158015610277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029b9190610557565b506102b067a5aa5ad13ff12a8c60c01b61034c565b6102c4675a5ac84d41412ab260c01b61034c565b8473ffffffffffffffffffffffffffffffffffffffff16638893002f8585846040518463ffffffff1660e01b8152600401610301939291906104e8565b6020604051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190610557565b505050505050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061037f82610354565b9050919050565b61038f81610374565b811461039a57600080fd5b50565b6000813590506103ac81610386565b92915050565b6000819050919050565b6103c5816103b2565b81146103d057600080fd5b50565b6000813590506103e2816103bc565b92915050565b600080600080608085870312156104025761040161034f565b5b60006104108782880161039d565b94505060206104218782880161039d565b9350506040610432878288016103d3565b9250506060610443878288016103d3565b91505092959194509250565b600080600080600060a0868803121561046b5761046a61034f565b5b60006104798882890161039d565b955050602061048a8882890161039d565b945050604061049b888289016103d3565b93505060606104ac888289016103d3565b92505060806104bd888289016103d3565b9150509295509295909350565b6104d381610374565b82525050565b6104e2816103b2565b82525050565b60006060820190506104fd60008301866104ca565b61050a60208301856104d9565b61051760408301846104d9565b949350505050565b60008115159050919050565b6105348161051f565b811461053f57600080fd5b50565b6000815190506105518161052b565b92915050565b60006020828403121561056d5761056c61034f565b5b600061057b84828501610542565b9150509291505056fea2646970667358221220917b8038dffff506d07cc582dc7bb9f81341efebbbe8b7b85b53f69a0a86e3a164736f6c63430008140033";

type TestProtectedCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestProtectedCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestProtectedCaller__factory extends ContractFactory {
  constructor(...args: TestProtectedCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestProtectedCaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestProtectedCaller__factory {
    return super.connect(runner) as TestProtectedCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestProtectedCallerInterface {
    return new Interface(_abi) as TestProtectedCallerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestProtectedCaller {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestProtectedCaller;
  }
}
