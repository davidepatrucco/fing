/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FailingTarget,
  FailingTargetInterface,
} from "../../contracts/FailingTarget";

const _abi = [
  {
    inputs: [],
    name: "called",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "doSomething",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "willRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f88061001f6000396000f3fe60806040526004361060305760003560e01c806350f9b6cd14603557806373ee93b314606157806382692679146075575b600080fd5b348015604057600080fd5b50600054604d9060ff1681565b604051901515815260200160405180910390f35b348015606c57600080fd5b5060736086565b005b60736000805460ff19166001179055565b60405162461bcd60e51b815260206004820152600d60248201526c1d185c99d95d081c995d995c9d609a1b604482015260640160405180910390fdfea2646970667358221220e256342ec7872754214e16076fa30b270b080731076d3de91f93cea3ede45af064736f6c63430008140033";

type FailingTargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FailingTargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FailingTarget__factory extends ContractFactory {
  constructor(...args: FailingTargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FailingTarget & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FailingTarget__factory {
    return super.connect(runner) as FailingTarget__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FailingTargetInterface {
    return new Interface(_abi) as FailingTargetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FailingTarget {
    return new Contract(address, _abi, runner) as unknown as FailingTarget;
  }
}
