{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "3e0e6280dc155c24049f4e21a43007ceeb0cca5e367b97fb602ac5c74c0e42f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "98cce1fe93df824cd80b45c8b5bab1f7fc4016fff6892ba886681fb621d7287b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "744d0fafd7f266c01683ba678d1154727c5876a775d4c9ef2af6a8af3f36b7d5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "a48780b84e5e0a4e7d16516592a5b1ac108bc50be916191152b9a9a35ee3c304",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:14",
        "version": {
          "withMetadata": "d875953070174536b90559950de92da942adb804a1bcf343e0b8b5999f32d68d",
          "withoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d",
          "linkedWithoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:24"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:25"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:26"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:28"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:143",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:17",
        "version": {
          "withMetadata": "f4289f5422b489ec8d26c73c6d18e518c7a038d8aa1f947a95f4d37fd64f2b0c",
          "withoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394",
          "linkedWithoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:248"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:112"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:113"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:111"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:112"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:113"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:114"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:117"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:152"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:154"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:156"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4322_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:157"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:158"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:159"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:173"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:174"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:175"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:178"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)4379_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:191"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:192"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:193"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:194"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)4405_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:215"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:216"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)4356_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)4300": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4322_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)4322_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)4300",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)4356_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)4405_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)4379_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)4414_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:19",
        "version": {
          "withMetadata": "08afab6b2a2f6b809b56f1ef44ef43303f2af39d4ed72a5483fd74917ba1cd5b",
          "withoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265",
          "linkedWithoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:14",
        "version": {
          "withMetadata": "73beacbf8413ece8719cab16055a6ced2e1436c9cf93703d8cccc726cacd0b5f",
          "withoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad",
          "linkedWithoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:41"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:44"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:45"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:14",
        "version": {
          "withMetadata": "27a8447d2c2c3adc75fb7f0fa52eca047fcdd37c4393853063f1a56550601e81",
          "withoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce",
          "linkedWithoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:63",
        "version": {
          "withMetadata": "6c88a436ca0b428322d35362ae568bc2a28b2a774ebb0c9ea06938c3d2b5d654",
          "withoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0",
          "linkedWithoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)12232_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:77"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:79"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)12232_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)12232_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:11",
        "version": {
          "withMetadata": "a3a82dd1b6410229c6492fab6c7ced072003a7109f79ffc320ad98e950c16b8c",
          "withoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3",
          "linkedWithoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:13",
        "version": {
          "withMetadata": "0f3dcb40fa9aa2661a003dd39cdd305facfb330579bb8f344df701b357a9afb4",
          "withoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8",
          "linkedWithoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:10",
        "version": {
          "withMetadata": "91681170763584028ff9e89f240e7bcc928ef171150ade5974ef094415970967",
          "withoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f",
          "linkedWithoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:13",
        "version": {
          "withMetadata": "4df6d42aca31abc15a131198f20c224e842bffb359ffc54150294641704c370d",
          "withoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c",
          "linkedWithoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:12",
        "version": {
          "withMetadata": "b13cb330e19dcf9e1f1d0b069d1ec0e3cc8d0fa512686b525b46d431ba10145c",
          "withoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e",
          "linkedWithoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:17"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:8",
        "version": {
          "withMetadata": "0208dc4f3c95f9d532e218f5fc2abb3317cd731f3fa4453a40f0c1f9d0ea91ed",
          "withoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2",
          "linkedWithoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:33"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:34"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)14905_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:44"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:45"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)14905_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)14905_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:12",
        "version": {
          "withMetadata": "00ce6d501a64ff3d948bd7bb33eca5ae1bfa5088947c04fed3ab8f61d74cd551",
          "withoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9",
          "linkedWithoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:25",
        "version": {
          "withMetadata": "2f91e94ad218d074adf2322e1d63b799c6cab1239b57c0abe2420b44ec292e4a",
          "withoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca",
          "linkedWithoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "988c51be94040b5bb78e6739ecf31c3539c880afc84253fa97a12de186ef7572",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "041c0d4f90bb8e17d3ab85a9968cb4f2c9ad776fac701e799df8a26338a603d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "5f46a4584c437cd91e6e4386b93037e61fa724904275bd84b5f58da24743a61f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e34a460afe63f8e676880ba0751522137768df1fdd3fff06c598d9006111366b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:10",
        "version": {
          "withMetadata": "79059e2bb31acea3a83b03fa3807e61dfac02457bf3e49cb4c469ba8100b4452",
          "withoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3",
          "linkedWithoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:13"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:14"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:16"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:13",
        "version": {
          "withMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "withoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "linkedWithoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:180"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:43"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:44"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:45"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:46"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:49"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:55"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:57"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:84"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:86"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:88"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)3774_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:89"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:90"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:91"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:105"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:106"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:107"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:110"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)3831_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:126"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)3857_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:147"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:148"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)3808_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)3752": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)3774_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3774_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)3752",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)3808_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)3857_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)3831_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)3866_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:15",
        "version": {
          "withMetadata": "fa7d56d4c070f47708c7e2c04c09c09e48d8f8acabe2e0ea795536559e1f8fa2",
          "withoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8",
          "linkedWithoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:10",
        "version": {
          "withMetadata": "63f8cb57f569b2da98123279d9bf1e343feb06d6d1f3f71a37b636c1c907c77a",
          "withoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f",
          "linkedWithoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:17"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:20"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:21"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:10",
        "version": {
          "withMetadata": "13ed5a03f801cd7ab4d1abdfd4c6a247040a69ac5ab280184c289faba0f4c935",
          "withoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369",
          "linkedWithoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:31",
        "version": {
          "withMetadata": "feae475f2d9966dd27b5de8425f15aa617fbd08567e599df9eac2a7529f41edc",
          "withoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729",
          "linkedWithoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)7539_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:41"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:43"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)7539_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)7539_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:7",
        "version": {
          "withMetadata": "e826b81139b58ed3089dcb5fc61a0aeb93de60296b63eebc1a4b6947f847a373",
          "withoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26",
          "linkedWithoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:9",
        "version": {
          "withMetadata": "fd557e9b86bd6aa02f9c1339abe5cc48001c49a436879805440d7a2cd5d3c7b6",
          "withoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc",
          "linkedWithoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:6",
        "version": {
          "withMetadata": "94981eb4e295d98feb071f6c39fa63965a1f341e0cef940dadef9d0f6f53a006",
          "withoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993",
          "linkedWithoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:9",
        "version": {
          "withMetadata": "1ebe5476da7b430eb6f96f419f4bd130c1ad0161504d93a68505e988df9fdfe2",
          "withoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29",
          "linkedWithoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "version": {
          "withMetadata": "49af3903d1b2333a073ed08b43494b99f81fa4a2dbe3fd73372a0df52d275304",
          "withoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f",
          "linkedWithoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:9"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:4",
        "version": {
          "withMetadata": "cc87cf1c556e166768caf882fca63e51cc3d396ba43f291d1a10dcc10d507ff3",
          "withoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e",
          "linkedWithoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:5"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:6"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)8723_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:16"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:17"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)8723_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)8723_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:8",
        "version": {
          "withMetadata": "e9972b2161c0d52b36398a4f2082b55306423fe3806bafda5def3f92f506c5ec",
          "withoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31",
          "linkedWithoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:21",
        "version": {
          "withMetadata": "4163e82de6020322da8066ceb5dee243728a2ccab8a9ee8f8aac4cb91355afeb",
          "withoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629",
          "linkedWithoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "3e0e6280dc155c24049f4e21a43007ceeb0cca5e367b97fb602ac5c74c0e42f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "98cce1fe93df824cd80b45c8b5bab1f7fc4016fff6892ba886681fb621d7287b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "744d0fafd7f266c01683ba678d1154727c5876a775d4c9ef2af6a8af3f36b7d5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "a48780b84e5e0a4e7d16516592a5b1ac108bc50be916191152b9a9a35ee3c304",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:14",
        "version": {
          "withMetadata": "d875953070174536b90559950de92da942adb804a1bcf343e0b8b5999f32d68d",
          "withoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d",
          "linkedWithoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:24"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:25"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:26"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:28"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:143",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:17",
        "version": {
          "withMetadata": "f4289f5422b489ec8d26c73c6d18e518c7a038d8aa1f947a95f4d37fd64f2b0c",
          "withoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394",
          "linkedWithoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:248"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:112"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:113"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:111"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:112"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:113"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:114"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:117"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:152"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:154"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:156"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4322_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:157"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:158"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:159"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:173"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:174"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:175"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:178"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)4379_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:191"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:192"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:193"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:194"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)4405_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:215"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:216"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)4356_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)4300": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4322_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)4322_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)4300",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)4356_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)4405_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)4379_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)4414_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:19",
        "version": {
          "withMetadata": "08afab6b2a2f6b809b56f1ef44ef43303f2af39d4ed72a5483fd74917ba1cd5b",
          "withoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265",
          "linkedWithoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:14",
        "version": {
          "withMetadata": "73beacbf8413ece8719cab16055a6ced2e1436c9cf93703d8cccc726cacd0b5f",
          "withoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad",
          "linkedWithoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:41"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:44"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:45"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:14",
        "version": {
          "withMetadata": "27a8447d2c2c3adc75fb7f0fa52eca047fcdd37c4393853063f1a56550601e81",
          "withoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce",
          "linkedWithoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:63",
        "version": {
          "withMetadata": "6c88a436ca0b428322d35362ae568bc2a28b2a774ebb0c9ea06938c3d2b5d654",
          "withoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0",
          "linkedWithoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)12232_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:77"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:79"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)12232_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)12232_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:11",
        "version": {
          "withMetadata": "a3a82dd1b6410229c6492fab6c7ced072003a7109f79ffc320ad98e950c16b8c",
          "withoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3",
          "linkedWithoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:13",
        "version": {
          "withMetadata": "0f3dcb40fa9aa2661a003dd39cdd305facfb330579bb8f344df701b357a9afb4",
          "withoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8",
          "linkedWithoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:10",
        "version": {
          "withMetadata": "91681170763584028ff9e89f240e7bcc928ef171150ade5974ef094415970967",
          "withoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f",
          "linkedWithoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:13",
        "version": {
          "withMetadata": "4df6d42aca31abc15a131198f20c224e842bffb359ffc54150294641704c370d",
          "withoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c",
          "linkedWithoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:12",
        "version": {
          "withMetadata": "b13cb330e19dcf9e1f1d0b069d1ec0e3cc8d0fa512686b525b46d431ba10145c",
          "withoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e",
          "linkedWithoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:17"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:8",
        "version": {
          "withMetadata": "0208dc4f3c95f9d532e218f5fc2abb3317cd731f3fa4453a40f0c1f9d0ea91ed",
          "withoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2",
          "linkedWithoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:33"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:34"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)14905_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:44"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:45"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)14905_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)14905_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:12",
        "version": {
          "withMetadata": "00ce6d501a64ff3d948bd7bb33eca5ae1bfa5088947c04fed3ab8f61d74cd551",
          "withoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9",
          "linkedWithoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:25",
        "version": {
          "withMetadata": "2f91e94ad218d074adf2322e1d63b799c6cab1239b57c0abe2420b44ec292e4a",
          "withoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca",
          "linkedWithoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "988c51be94040b5bb78e6739ecf31c3539c880afc84253fa97a12de186ef7572",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "041c0d4f90bb8e17d3ab85a9968cb4f2c9ad776fac701e799df8a26338a603d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "5f46a4584c437cd91e6e4386b93037e61fa724904275bd84b5f58da24743a61f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e34a460afe63f8e676880ba0751522137768df1fdd3fff06c598d9006111366b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:10",
        "version": {
          "withMetadata": "79059e2bb31acea3a83b03fa3807e61dfac02457bf3e49cb4c469ba8100b4452",
          "withoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3",
          "linkedWithoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:13"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:14"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:16"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:13",
        "version": {
          "withMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "withoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "linkedWithoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:180"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:43"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:44"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:45"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:46"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:49"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:55"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:57"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:84"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:86"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:88"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)3774_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:89"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:90"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:91"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:105"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:106"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:107"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:110"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)3831_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:126"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)3857_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:147"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:148"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)3808_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)3752": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)3774_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3774_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)3752",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)3808_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)3857_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)3831_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)3866_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:15",
        "version": {
          "withMetadata": "fa7d56d4c070f47708c7e2c04c09c09e48d8f8acabe2e0ea795536559e1f8fa2",
          "withoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8",
          "linkedWithoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:10",
        "version": {
          "withMetadata": "63f8cb57f569b2da98123279d9bf1e343feb06d6d1f3f71a37b636c1c907c77a",
          "withoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f",
          "linkedWithoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:17"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:20"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:21"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:10",
        "version": {
          "withMetadata": "13ed5a03f801cd7ab4d1abdfd4c6a247040a69ac5ab280184c289faba0f4c935",
          "withoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369",
          "linkedWithoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:31",
        "version": {
          "withMetadata": "feae475f2d9966dd27b5de8425f15aa617fbd08567e599df9eac2a7529f41edc",
          "withoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729",
          "linkedWithoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)7539_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:41"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:43"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)7539_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)7539_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:7",
        "version": {
          "withMetadata": "e826b81139b58ed3089dcb5fc61a0aeb93de60296b63eebc1a4b6947f847a373",
          "withoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26",
          "linkedWithoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:9",
        "version": {
          "withMetadata": "fd557e9b86bd6aa02f9c1339abe5cc48001c49a436879805440d7a2cd5d3c7b6",
          "withoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc",
          "linkedWithoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:6",
        "version": {
          "withMetadata": "94981eb4e295d98feb071f6c39fa63965a1f341e0cef940dadef9d0f6f53a006",
          "withoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993",
          "linkedWithoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:9",
        "version": {
          "withMetadata": "1ebe5476da7b430eb6f96f419f4bd130c1ad0161504d93a68505e988df9fdfe2",
          "withoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29",
          "linkedWithoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "version": {
          "withMetadata": "49af3903d1b2333a073ed08b43494b99f81fa4a2dbe3fd73372a0df52d275304",
          "withoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f",
          "linkedWithoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:9"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:4",
        "version": {
          "withMetadata": "cc87cf1c556e166768caf882fca63e51cc3d396ba43f291d1a10dcc10d507ff3",
          "withoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e",
          "linkedWithoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:5"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:6"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)8723_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:16"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:17"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)8723_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)8723_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:8",
        "version": {
          "withMetadata": "e9972b2161c0d52b36398a4f2082b55306423fe3806bafda5def3f92f506c5ec",
          "withoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31",
          "linkedWithoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:21",
        "version": {
          "withMetadata": "4163e82de6020322da8066ceb5dee243728a2ccab8a9ee8f8aac4cb91355afeb",
          "withoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629",
          "linkedWithoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "3e0e6280dc155c24049f4e21a43007ceeb0cca5e367b97fb602ac5c74c0e42f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "98cce1fe93df824cd80b45c8b5bab1f7fc4016fff6892ba886681fb621d7287b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "744d0fafd7f266c01683ba678d1154727c5876a775d4c9ef2af6a8af3f36b7d5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "a48780b84e5e0a4e7d16516592a5b1ac108bc50be916191152b9a9a35ee3c304",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:14",
        "version": {
          "withMetadata": "d875953070174536b90559950de92da942adb804a1bcf343e0b8b5999f32d68d",
          "withoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d",
          "linkedWithoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:24"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:25"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:26"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:28"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:143",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:17",
        "version": {
          "withMetadata": "f4289f5422b489ec8d26c73c6d18e518c7a038d8aa1f947a95f4d37fd64f2b0c",
          "withoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394",
          "linkedWithoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:248"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:112"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:113"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:111"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:112"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:113"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:114"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:117"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:152"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:154"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:156"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4322_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:157"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:158"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:159"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:173"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:174"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:175"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:178"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)4379_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:191"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:192"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:193"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:194"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)4405_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:215"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:216"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)4356_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)4300": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4322_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)4322_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)4300",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)4356_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)4405_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)4379_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)4414_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:19",
        "version": {
          "withMetadata": "08afab6b2a2f6b809b56f1ef44ef43303f2af39d4ed72a5483fd74917ba1cd5b",
          "withoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265",
          "linkedWithoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:14",
        "version": {
          "withMetadata": "73beacbf8413ece8719cab16055a6ced2e1436c9cf93703d8cccc726cacd0b5f",
          "withoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad",
          "linkedWithoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:41"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:44"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:45"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:14",
        "version": {
          "withMetadata": "27a8447d2c2c3adc75fb7f0fa52eca047fcdd37c4393853063f1a56550601e81",
          "withoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce",
          "linkedWithoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:63",
        "version": {
          "withMetadata": "6c88a436ca0b428322d35362ae568bc2a28b2a774ebb0c9ea06938c3d2b5d654",
          "withoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0",
          "linkedWithoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)12232_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:77"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:79"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)12232_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)12232_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:11",
        "version": {
          "withMetadata": "a3a82dd1b6410229c6492fab6c7ced072003a7109f79ffc320ad98e950c16b8c",
          "withoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3",
          "linkedWithoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:13",
        "version": {
          "withMetadata": "0f3dcb40fa9aa2661a003dd39cdd305facfb330579bb8f344df701b357a9afb4",
          "withoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8",
          "linkedWithoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:10",
        "version": {
          "withMetadata": "91681170763584028ff9e89f240e7bcc928ef171150ade5974ef094415970967",
          "withoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f",
          "linkedWithoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:13",
        "version": {
          "withMetadata": "4df6d42aca31abc15a131198f20c224e842bffb359ffc54150294641704c370d",
          "withoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c",
          "linkedWithoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:12",
        "version": {
          "withMetadata": "b13cb330e19dcf9e1f1d0b069d1ec0e3cc8d0fa512686b525b46d431ba10145c",
          "withoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e",
          "linkedWithoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:17"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:8",
        "version": {
          "withMetadata": "0208dc4f3c95f9d532e218f5fc2abb3317cd731f3fa4453a40f0c1f9d0ea91ed",
          "withoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2",
          "linkedWithoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:33"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:34"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)14905_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:44"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:45"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)14905_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)14905_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:12",
        "version": {
          "withMetadata": "00ce6d501a64ff3d948bd7bb33eca5ae1bfa5088947c04fed3ab8f61d74cd551",
          "withoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9",
          "linkedWithoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:25",
        "version": {
          "withMetadata": "2f91e94ad218d074adf2322e1d63b799c6cab1239b57c0abe2420b44ec292e4a",
          "withoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca",
          "linkedWithoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "988c51be94040b5bb78e6739ecf31c3539c880afc84253fa97a12de186ef7572",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "041c0d4f90bb8e17d3ab85a9968cb4f2c9ad776fac701e799df8a26338a603d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "5f46a4584c437cd91e6e4386b93037e61fa724904275bd84b5f58da24743a61f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e34a460afe63f8e676880ba0751522137768df1fdd3fff06c598d9006111366b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:10",
        "version": {
          "withMetadata": "79059e2bb31acea3a83b03fa3807e61dfac02457bf3e49cb4c469ba8100b4452",
          "withoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3",
          "linkedWithoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:13"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:14"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:16"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:13",
        "version": {
          "withMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "withoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "linkedWithoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:180"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:43"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:44"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:45"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:46"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:49"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:55"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:57"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:84"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:86"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:88"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)3774_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:89"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:90"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:91"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:105"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:106"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:107"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:110"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)3831_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:126"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)3857_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:147"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:148"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)3808_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)3752": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)3774_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3774_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)3752",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)3808_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)3857_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)3831_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)3866_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:15",
        "version": {
          "withMetadata": "fa7d56d4c070f47708c7e2c04c09c09e48d8f8acabe2e0ea795536559e1f8fa2",
          "withoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8",
          "linkedWithoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:10",
        "version": {
          "withMetadata": "63f8cb57f569b2da98123279d9bf1e343feb06d6d1f3f71a37b636c1c907c77a",
          "withoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f",
          "linkedWithoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:17"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:20"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:21"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:10",
        "version": {
          "withMetadata": "13ed5a03f801cd7ab4d1abdfd4c6a247040a69ac5ab280184c289faba0f4c935",
          "withoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369",
          "linkedWithoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:31",
        "version": {
          "withMetadata": "feae475f2d9966dd27b5de8425f15aa617fbd08567e599df9eac2a7529f41edc",
          "withoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729",
          "linkedWithoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)7539_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:41"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:43"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)7539_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)7539_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:7",
        "version": {
          "withMetadata": "e826b81139b58ed3089dcb5fc61a0aeb93de60296b63eebc1a4b6947f847a373",
          "withoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26",
          "linkedWithoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:9",
        "version": {
          "withMetadata": "fd557e9b86bd6aa02f9c1339abe5cc48001c49a436879805440d7a2cd5d3c7b6",
          "withoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc",
          "linkedWithoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:6",
        "version": {
          "withMetadata": "94981eb4e295d98feb071f6c39fa63965a1f341e0cef940dadef9d0f6f53a006",
          "withoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993",
          "linkedWithoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:9",
        "version": {
          "withMetadata": "1ebe5476da7b430eb6f96f419f4bd130c1ad0161504d93a68505e988df9fdfe2",
          "withoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29",
          "linkedWithoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "version": {
          "withMetadata": "49af3903d1b2333a073ed08b43494b99f81fa4a2dbe3fd73372a0df52d275304",
          "withoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f",
          "linkedWithoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:9"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:4",
        "version": {
          "withMetadata": "cc87cf1c556e166768caf882fca63e51cc3d396ba43f291d1a10dcc10d507ff3",
          "withoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e",
          "linkedWithoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:5"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:6"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)8723_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:16"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:17"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)8723_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)8723_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:8",
        "version": {
          "withMetadata": "e9972b2161c0d52b36398a4f2082b55306423fe3806bafda5def3f92f506c5ec",
          "withoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31",
          "linkedWithoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:21",
        "version": {
          "withMetadata": "4163e82de6020322da8066ceb5dee243728a2ccab8a9ee8f8aac4cb91355afeb",
          "withoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629",
          "linkedWithoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "3e0e6280dc155c24049f4e21a43007ceeb0cca5e367b97fb602ac5c74c0e42f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "98cce1fe93df824cd80b45c8b5bab1f7fc4016fff6892ba886681fb621d7287b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "744d0fafd7f266c01683ba678d1154727c5876a775d4c9ef2af6a8af3f36b7d5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "a48780b84e5e0a4e7d16516592a5b1ac108bc50be916191152b9a9a35ee3c304",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:14",
        "version": {
          "withMetadata": "d875953070174536b90559950de92da942adb804a1bcf343e0b8b5999f32d68d",
          "withoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d",
          "linkedWithoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:24"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:25"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:26"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:28"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:143",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:17",
        "version": {
          "withMetadata": "f4289f5422b489ec8d26c73c6d18e518c7a038d8aa1f947a95f4d37fd64f2b0c",
          "withoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394",
          "linkedWithoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:248"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:112"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:113"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:111"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:112"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:113"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:114"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:117"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:152"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:154"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:156"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4322_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:157"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:158"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:159"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:173"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:174"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:175"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:178"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)4379_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:191"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:192"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:193"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:194"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)4405_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:215"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:216"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)4356_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)4300": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4322_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)4322_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)4300",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)4356_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)4405_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)4379_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)4414_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:19",
        "version": {
          "withMetadata": "08afab6b2a2f6b809b56f1ef44ef43303f2af39d4ed72a5483fd74917ba1cd5b",
          "withoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265",
          "linkedWithoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:14",
        "version": {
          "withMetadata": "73beacbf8413ece8719cab16055a6ced2e1436c9cf93703d8cccc726cacd0b5f",
          "withoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad",
          "linkedWithoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:41"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:44"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:45"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:14",
        "version": {
          "withMetadata": "27a8447d2c2c3adc75fb7f0fa52eca047fcdd37c4393853063f1a56550601e81",
          "withoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce",
          "linkedWithoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:63",
        "version": {
          "withMetadata": "6c88a436ca0b428322d35362ae568bc2a28b2a774ebb0c9ea06938c3d2b5d654",
          "withoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0",
          "linkedWithoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)12232_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:77"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:79"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)12232_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)12232_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:11",
        "version": {
          "withMetadata": "a3a82dd1b6410229c6492fab6c7ced072003a7109f79ffc320ad98e950c16b8c",
          "withoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3",
          "linkedWithoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:13",
        "version": {
          "withMetadata": "0f3dcb40fa9aa2661a003dd39cdd305facfb330579bb8f344df701b357a9afb4",
          "withoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8",
          "linkedWithoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:10",
        "version": {
          "withMetadata": "91681170763584028ff9e89f240e7bcc928ef171150ade5974ef094415970967",
          "withoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f",
          "linkedWithoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:13",
        "version": {
          "withMetadata": "4df6d42aca31abc15a131198f20c224e842bffb359ffc54150294641704c370d",
          "withoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c",
          "linkedWithoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:12",
        "version": {
          "withMetadata": "b13cb330e19dcf9e1f1d0b069d1ec0e3cc8d0fa512686b525b46d431ba10145c",
          "withoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e",
          "linkedWithoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:17"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:8",
        "version": {
          "withMetadata": "0208dc4f3c95f9d532e218f5fc2abb3317cd731f3fa4453a40f0c1f9d0ea91ed",
          "withoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2",
          "linkedWithoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:33"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:34"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)14905_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:44"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:45"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)14905_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)14905_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:12",
        "version": {
          "withMetadata": "00ce6d501a64ff3d948bd7bb33eca5ae1bfa5088947c04fed3ab8f61d74cd551",
          "withoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9",
          "linkedWithoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:25",
        "version": {
          "withMetadata": "2f91e94ad218d074adf2322e1d63b799c6cab1239b57c0abe2420b44ec292e4a",
          "withoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca",
          "linkedWithoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "988c51be94040b5bb78e6739ecf31c3539c880afc84253fa97a12de186ef7572",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "041c0d4f90bb8e17d3ab85a9968cb4f2c9ad776fac701e799df8a26338a603d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "5f46a4584c437cd91e6e4386b93037e61fa724904275bd84b5f58da24743a61f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e34a460afe63f8e676880ba0751522137768df1fdd3fff06c598d9006111366b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:10",
        "version": {
          "withMetadata": "79059e2bb31acea3a83b03fa3807e61dfac02457bf3e49cb4c469ba8100b4452",
          "withoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3",
          "linkedWithoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:13"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:14"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:16"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:13",
        "version": {
          "withMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "withoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "linkedWithoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:180"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:43"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:44"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:45"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:46"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:49"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:55"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:57"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:84"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:86"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:88"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)3774_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:89"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:90"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:91"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:105"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:106"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:107"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:110"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)3831_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:126"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)3857_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:147"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:148"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)3808_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)3752": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)3774_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3774_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)3752",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)3808_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)3857_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)3831_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)3866_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:15",
        "version": {
          "withMetadata": "fa7d56d4c070f47708c7e2c04c09c09e48d8f8acabe2e0ea795536559e1f8fa2",
          "withoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8",
          "linkedWithoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:10",
        "version": {
          "withMetadata": "63f8cb57f569b2da98123279d9bf1e343feb06d6d1f3f71a37b636c1c907c77a",
          "withoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f",
          "linkedWithoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:17"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:20"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:21"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:10",
        "version": {
          "withMetadata": "13ed5a03f801cd7ab4d1abdfd4c6a247040a69ac5ab280184c289faba0f4c935",
          "withoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369",
          "linkedWithoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:31",
        "version": {
          "withMetadata": "feae475f2d9966dd27b5de8425f15aa617fbd08567e599df9eac2a7529f41edc",
          "withoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729",
          "linkedWithoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)7539_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:41"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:43"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)7539_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)7539_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:7",
        "version": {
          "withMetadata": "e826b81139b58ed3089dcb5fc61a0aeb93de60296b63eebc1a4b6947f847a373",
          "withoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26",
          "linkedWithoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:9",
        "version": {
          "withMetadata": "fd557e9b86bd6aa02f9c1339abe5cc48001c49a436879805440d7a2cd5d3c7b6",
          "withoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc",
          "linkedWithoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:6",
        "version": {
          "withMetadata": "94981eb4e295d98feb071f6c39fa63965a1f341e0cef940dadef9d0f6f53a006",
          "withoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993",
          "linkedWithoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:9",
        "version": {
          "withMetadata": "1ebe5476da7b430eb6f96f419f4bd130c1ad0161504d93a68505e988df9fdfe2",
          "withoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29",
          "linkedWithoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "version": {
          "withMetadata": "49af3903d1b2333a073ed08b43494b99f81fa4a2dbe3fd73372a0df52d275304",
          "withoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f",
          "linkedWithoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:9"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:4",
        "version": {
          "withMetadata": "cc87cf1c556e166768caf882fca63e51cc3d396ba43f291d1a10dcc10d507ff3",
          "withoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e",
          "linkedWithoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:5"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:6"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)8723_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:16"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:17"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)8723_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)8723_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:8",
        "version": {
          "withMetadata": "e9972b2161c0d52b36398a4f2082b55306423fe3806bafda5def3f92f506c5ec",
          "withoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31",
          "linkedWithoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:21",
        "version": {
          "withMetadata": "4163e82de6020322da8066ceb5dee243728a2ccab8a9ee8f8aac4cb91355afeb",
          "withoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629",
          "linkedWithoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "3e0e6280dc155c24049f4e21a43007ceeb0cca5e367b97fb602ac5c74c0e42f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "98cce1fe93df824cd80b45c8b5bab1f7fc4016fff6892ba886681fb621d7287b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "744d0fafd7f266c01683ba678d1154727c5876a775d4c9ef2af6a8af3f36b7d5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "a48780b84e5e0a4e7d16516592a5b1ac108bc50be916191152b9a9a35ee3c304",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:14",
        "version": {
          "withMetadata": "d875953070174536b90559950de92da942adb804a1bcf343e0b8b5999f32d68d",
          "withoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d",
          "linkedWithoutMetadata": "f41bc2791cd9c7596d02bbe25e35a9cd70c9eca7c24635db0a5f9515120ed99d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:24"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:25"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:26"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:28"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:143",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:17",
        "version": {
          "withMetadata": "f4289f5422b489ec8d26c73c6d18e518c7a038d8aa1f947a95f4d37fd64f2b0c",
          "withoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394",
          "linkedWithoutMetadata": "a3ad5d0713cbf35d182dde43bdd17836e990e56c247c2c8dfc712cb4c11f1394"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:248"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:111"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:112"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:113"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:111"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:112"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:113"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:114"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:117"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:152"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:154"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:156"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)4322_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:157"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:158"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:159"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:173"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:174"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:175"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:178"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)4379_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:191"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:192"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:193"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:194"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)4405_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:215"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:216"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)4356_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)4300": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)4356_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)4414_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)4322_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)4322_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)4300",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)4356_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)4405_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)4379_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)4414_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:19",
        "version": {
          "withMetadata": "08afab6b2a2f6b809b56f1ef44ef43303f2af39d4ed72a5483fd74917ba1cd5b",
          "withoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265",
          "linkedWithoutMetadata": "a5b3dbf9c5d36be9498d0f75542083fcea65a1f67beb0469f80fb1134b17b265"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:14",
        "version": {
          "withMetadata": "73beacbf8413ece8719cab16055a6ced2e1436c9cf93703d8cccc726cacd0b5f",
          "withoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad",
          "linkedWithoutMetadata": "a77c8f753ba894887e8fdf5b63b5340e5ac179a01b17046aa0fab5bbf2d5f7ad"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:84"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:85"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:86"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:87"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:88"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:94"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:112"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)8596_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:113"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:114"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:115"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:126"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:127"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:128"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)8647_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:146"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:147"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)8673_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:157"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:158"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:159"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:160"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:41"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:44"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:45"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)8626_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)8574": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)8626_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)8656_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)8596_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)8596_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)8574",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)8626_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)8647_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)8673_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)8656_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:14",
        "version": {
          "withMetadata": "27a8447d2c2c3adc75fb7f0fa52eca047fcdd37c4393853063f1a56550601e81",
          "withoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce",
          "linkedWithoutMetadata": "ce3c462a186e0dd92409dd45b0da4833aeacb346cc45d2b1487bd33e22d9afce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:63",
        "version": {
          "withMetadata": "6c88a436ca0b428322d35362ae568bc2a28b2a774ebb0c9ea06938c3d2b5d654",
          "withoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0",
          "linkedWithoutMetadata": "9e068555fbd12f621fac01e508379524f8ad2e22e3f5ea5c2ef2fb21931b24a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)12232_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:77"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:79"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)12232_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)12232_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:11",
        "version": {
          "withMetadata": "a3a82dd1b6410229c6492fab6c7ced072003a7109f79ffc320ad98e950c16b8c",
          "withoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3",
          "linkedWithoutMetadata": "c49a22c07b34ac03b360d0d73b57d6fbfcccfe80ea0f23d9e661f0147d5b95e3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:13",
        "version": {
          "withMetadata": "0f3dcb40fa9aa2661a003dd39cdd305facfb330579bb8f344df701b357a9afb4",
          "withoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8",
          "linkedWithoutMetadata": "22b081eaf7848a9ff74ffe675d896ecf7669cbcb40046904fe95f1d5d35b99d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:10",
        "version": {
          "withMetadata": "91681170763584028ff9e89f240e7bcc928ef171150ade5974ef094415970967",
          "withoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f",
          "linkedWithoutMetadata": "d05d0492714dcb0beb440ccdaf775b3183f9aa3cb1199918f7080ddc9234a28f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:13",
        "version": {
          "withMetadata": "4df6d42aca31abc15a131198f20c224e842bffb359ffc54150294641704c370d",
          "withoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c",
          "linkedWithoutMetadata": "bfe8552678921c584a891b614bab6c173f220d7a9a04225734fbcd474b1b559c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:12",
        "version": {
          "withMetadata": "b13cb330e19dcf9e1f1d0b069d1ec0e3cc8d0fa512686b525b46d431ba10145c",
          "withoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e",
          "linkedWithoutMetadata": "abc1991dd6e1f408b8b6ebdfe2f2ff04189ff33be584da3fa19fe0fdddaa950e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:17"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:8",
        "version": {
          "withMetadata": "0208dc4f3c95f9d532e218f5fc2abb3317cd731f3fa4453a40f0c1f9d0ea91ed",
          "withoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2",
          "linkedWithoutMetadata": "4139b47a5185d015e204fcb4b7fdd107f754e9c2eb261f37caa70eb1906ffcc2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:33"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:34"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)14905_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:44"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:45"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)14905_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)14905_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:12",
        "version": {
          "withMetadata": "00ce6d501a64ff3d948bd7bb33eca5ae1bfa5088947c04fed3ab8f61d74cd551",
          "withoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9",
          "linkedWithoutMetadata": "414d9942a567e767fc4b02813fe92ea0ba0ec5911f43a763eac6362ffcdf93d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:25",
        "version": {
          "withMetadata": "2f91e94ad218d074adf2322e1d63b799c6cab1239b57c0abe2420b44ec292e4a",
          "withoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca",
          "linkedWithoutMetadata": "f0234b0b74c45397a4bd0d06b962bb9b71d2d9d46e0477f3d8747278acd36bca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "988c51be94040b5bb78e6739ecf31c3539c880afc84253fa97a12de186ef7572",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "041c0d4f90bb8e17d3ab85a9968cb4f2c9ad776fac701e799df8a26338a603d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "5f46a4584c437cd91e6e4386b93037e61fa724904275bd84b5f58da24743a61f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e34a460afe63f8e676880ba0751522137768df1fdd3fff06c598d9006111366b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:FIACoinMigration": {
        "src": "contracts/FIACoinMigration.sol:10",
        "version": {
          "withMetadata": "79059e2bb31acea3a83b03fa3807e61dfac02457bf3e49cb4c469ba8100b4452",
          "withoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3",
          "linkedWithoutMetadata": "86d2a460a7ddc71666f7ec2a801d8cafb0dad03d92bbd531aba58994d60b06e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "enableMigration(address)",
          "migrate()",
          "getMigrationStatus(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinMigration",
            "src": "contracts/FIACoinMigration.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oldContract",
            "src": "contracts/FIACoinMigration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "newContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:13"
            },
            {
              "label": "migrationEnabled",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:14"
            },
            {
              "label": "hasMigrated",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:16"
            },
            {
              "label": "migratedAmount",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinMigration",
              "src": "contracts/FIACoinMigration.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinMigration.sol:IFIACoinV7": {
        "src": "contracts/FIACoinMigration.sol:85",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrateFromV6(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6.sol:FIACoinV6": {
        "src": "contracts/FIACoinV6.sol:13",
        "version": {
          "withMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "withoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15",
          "linkedWithoutMetadata": "5e1e973902f85fd620a90ec5d975bd947eaf784a12f905fff3972199b1a07d15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "propose(string,uint8,bytes)",
          "vote(uint256,bool)",
          "execute(uint256)",
          "getVotingPower(address)",
          "setExecutor(address)",
          "ownerMintForTests(address,uint256)",
          "regularMint(address,uint256)",
          "ownerCreateProposalForTests(address,string,uint8,bytes)",
          "protectedTransfer(address,uint256,uint256)",
          "transferWithData(address,uint256,bytes)",
          "batchTransfer(address[],uint256[])",
          "setTotalFeeBP(uint256)",
          "setFeeDistribution(uint256,uint256,uint256)",
          "setFeeExempt(address,bool)",
          "emergencyPause()",
          "emergencyUnpause()",
          "burn(uint256)",
          "addToRewardPool(uint256)",
          "stake(uint256,uint256,bool)",
          "unstake(uint256)",
          "claimRewards(uint256)",
          "getStakeCount(address)",
          "calculateRewards(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FIACoinV6",
            "src": "contracts/FIACoinV6.sol:180"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalFeeBP",
            "src": "contracts/FIACoinV6.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToTreasuryBP",
            "src": "contracts/FIACoinV6.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToFounderBP",
            "src": "contracts/FIACoinV6.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeToBurnBP",
            "src": "contracts/FIACoinV6.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:43"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:44"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:45"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:46"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:49"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:55"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:57"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:84"
            },
            {
              "label": "_initializing",
              "offset": 20,
              "slot": "15",
              "type": "t_bool",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:86"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:88"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_struct(Proposal)3774_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:89"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:90"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:91"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:105"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:106"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:107"
            },
            {
              "label": "stakingAPY",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:110"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "24",
              "type": "t_struct(TransactionLimits)3831_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:123"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:124"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:125"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:126"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "31",
              "type": "t_struct(TokenAnalytics)3857_storage",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:147"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "36",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)",
              "contract": "FIACoinV6",
              "src": "contracts/FIACoinV6.sol:148"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(StakeInfo)3808_storage)dyn_storage": {
              "label": "struct FIACoinV6.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)3752": {
              "label": "enum FIACoinV6.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)3808_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)3866_storage)": {
              "label": "mapping(address => struct FIACoinV6.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)3774_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3774_storage": {
              "label": "struct FIACoinV6.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)3752",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)3808_storage": {
              "label": "struct FIACoinV6.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)3857_storage": {
              "label": "struct FIACoinV6.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)3831_storage": {
              "label": "struct FIACoinV6.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)3866_storage": {
              "label": "struct FIACoinV6.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable": {
        "src": "contracts/FIACoinV6Upgradeable.sol:15",
        "version": {
          "withMetadata": "fa7d56d4c070f47708c7e2c04c09c09e48d8f8acabe2e0ea795536559e1f8fa2",
          "withoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8",
          "linkedWithoutMetadata": "ce1ef22436c1571fe70522a6596a6e16d69a862f9d0a91239a15fb32ba5963b8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "version()",
          "setTotalFeeBP(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "stake(uint256,uint256,bool)",
          "getStakeCount(address)",
          "stakingAPY(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FIACoinV7Upgradeable.sol:FIACoinV7Upgradeable": {
        "src": "contracts/FIACoinV7Upgradeable.sol:10",
        "version": {
          "withMetadata": "63f8cb57f569b2da98123279d9bf1e343feb06d6d1f3f71a37b636c1c907c77a",
          "withoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f",
          "linkedWithoutMetadata": "daa201750d903e5c1ab9f84fe39ccd9ad58da51f18b912c653367eccda01713f"
        },
        "inherit": [
          "contracts/FIACoinV6Upgradeable.sol:FIACoinV6Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initializeV7()",
          "version()",
          "calculateRewards(address,uint256)",
          "unstake(uint256)",
          "setEmergencyWithdrawal(bool)",
          "configureDynamicAPY(bool,uint256)",
          "getEffectiveAPY(uint256)",
          "batchStake(uint256[],uint256[],bool[])",
          "getUserStakingInfo(address)",
          "proposeWithAutoExecution(string,uint8,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "totalFeeBP",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:48"
            },
            {
              "label": "feeToTreasuryBP",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:49"
            },
            {
              "label": "feeToFounderBP",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:50"
            },
            {
              "label": "feeToBurnBP",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:51"
            },
            {
              "label": "lastFeeChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:52"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:54"
            },
            {
              "label": "founderWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:55"
            },
            {
              "label": "executor",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:56"
            },
            {
              "label": "isFeeExempt",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:58"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:76"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)5836_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:77"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:78"
            },
            {
              "label": "votingPower",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:79"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:90"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:91"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:92"
            },
            {
              "label": "tokenStats",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(TokenAnalytics)5887_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:110"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:111"
            },
            {
              "label": "txLimits",
              "offset": 0,
              "slot": "22",
              "type": "t_struct(TransactionLimits)5913_storage",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:121"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "26",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:122"
            },
            {
              "label": "lastTxTime",
              "offset": 0,
              "slot": "27",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:123"
            },
            {
              "label": "usedNonces",
              "offset": 0,
              "slot": "28",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "FIACoinV6Upgradeable",
              "src": "contracts/FIACoinV6Upgradeable.sol:124"
            },
            {
              "label": "emergencyWithdrawalEnabled",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:17"
            },
            {
              "label": "dynamicAPYEnabled",
              "offset": 0,
              "slot": "30",
              "type": "t_bool",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:20"
            },
            {
              "label": "baseAPYMultiplier",
              "offset": 0,
              "slot": "31",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:21"
            },
            {
              "label": "bugFixVersion",
              "offset": 0,
              "slot": "32",
              "type": "t_uint256",
              "contract": "FIACoinV7Upgradeable",
              "src": "contracts/FIACoinV7Upgradeable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)222_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)417_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)481_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_struct(StakeInfo)5866_storage)dyn_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_enum(ProposalType)5814": {
              "label": "enum FIACoinV6Upgradeable.ProposalType",
              "members": [
                "FEE_CHANGE",
                "TREASURY_SPEND",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(StakeInfo)5866_storage)dyn_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.StakeInfo[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserAnalytics)5896_storage)": {
              "label": "mapping(address => struct FIACoinV6Upgradeable.UserAnalytics)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)5836_storage)": {
              "label": "mapping(uint256 => struct FIACoinV6Upgradeable.Proposal)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)5836_storage": {
              "label": "struct FIACoinV6Upgradeable.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)5814",
                  "offset": 1,
                  "slot": "7"
                },
                {
                  "label": "proposalData",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(StakeInfo)5866_storage": {
              "label": "struct FIACoinV6Upgradeable.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "autoCompound",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TokenAnalytics)5887_storage": {
              "label": "struct FIACoinV6Upgradeable.TokenAnalytics",
              "members": [
                {
                  "label": "totalFeeCollected",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBurned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "uniqueHolders",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(TransactionLimits)5913_storage": {
              "label": "struct FIACoinV6Upgradeable.TransactionLimits",
              "members": [
                {
                  "label": "maxTxAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxWalletAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "txCooldown",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "limitsActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserAnalytics)5896_storage": {
              "label": "struct FIACoinV6Upgradeable.UserAnalytics",
              "members": [
                {
                  "label": "totalFeesPaid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalStakingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "transactionCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "firstTransactionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:IERC20": {
        "src": "contracts/LPTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferFrom(address,address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LPTimelock.sol:LPTimelock": {
        "src": "contracts/LPTimelock.sol:10",
        "version": {
          "withMetadata": "13ed5a03f801cd7ab4d1abdfd4c6a247040a69ac5ab280184c289faba0f4c935",
          "withoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369",
          "linkedWithoutMetadata": "693d294fd8ad006fe2e4c201a0b8c77d5294d5bcb0246a414a31881a0bd25369"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "deposit(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPTimelock",
            "src": "contracts/LPTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lp",
            "src": "contracts/LPTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/LPTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LPTimelock",
              "src": "contracts/LPTimelock.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockDEX": {
        "src": "contracts/MockDEX.sol:31",
        "version": {
          "withMetadata": "feae475f2d9966dd27b5de8425f15aa617fbd08567e599df9eac2a7529f41edc",
          "withoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729",
          "linkedWithoutMetadata": "582cd6fd79ff3ca2828b932e9d30d1b5e4037d72b07f479e48168cf316cf3729"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256)",
          "swap(address,address,uint256)",
          "removeLiquidity(address,address,uint256)",
          "onLPTransfer(address,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pairs",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Pair)7539_storage)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:41"
            },
            {
              "label": "lpToPair",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:43"
            },
            {
              "label": "lpHolderBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))",
              "contract": "MockDEX",
              "src": "contracts/MockDEX.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Pair)7539_storage)": {
              "label": "mapping(bytes32 => struct MockDEX.Pair)",
              "numberOfBytes": "32"
            },
            "t_struct(Pair)7539_storage": {
              "label": "struct MockDEX.Pair",
              "members": [
                {
                  "label": "token0",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "token1",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lp",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reserve0",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reserve1",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockDEX.sol:MockLP": {
        "src": "contracts/MockDEX.sol:7",
        "version": {
          "withMetadata": "e826b81139b58ed3089dcb5fc61a0aeb93de60296b63eebc1a4b6947f847a373",
          "withoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26",
          "linkedWithoutMetadata": "751af6d49b89714b0295a61e8882ffe2ddcc901b49c093cd80ae4005b7414a26"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockLP",
            "src": "contracts/MockDEX.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockLP",
              "src": "contracts/MockDEX.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSafe.sol:MockSafe": {
        "src": "contracts/MockSafe.sol:9",
        "version": {
          "withMetadata": "fd557e9b86bd6aa02f9c1339abe5cc48001c49a436879805440d7a2cd5d3c7b6",
          "withoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc",
          "linkedWithoutMetadata": "235726d17ff24d300daed42f1de5139ba6de6330a0209510ca6885befdc6dddc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "callExecute(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockSafe",
            "src": "contracts/MockSafe.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "MockSafe",
              "src": "contracts/MockSafe.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockToken.sol:MockToken": {
        "src": "contracts/MockToken.sol:6",
        "version": {
          "withMetadata": "94981eb4e295d98feb071f6c39fa63965a1f341e0cef940dadef9d0f6f53a006",
          "withoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993",
          "linkedWithoutMetadata": "56b747274b7be35e1a21ea15832cf07f86dc6b4d6ca16865a9e58299de958993"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockToken.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:IERC721": {
        "src": "contracts/NFTTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256)",
          "ownerOf(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/NFTTimelock.sol:NFTTimelock": {
        "src": "contracts/NFTTimelock.sol:9",
        "version": {
          "withMetadata": "1ebe5476da7b430eb6f96f419f4bd130c1ad0161504d93a68505e988df9fdfe2",
          "withoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29",
          "linkedWithoutMetadata": "05282f3af403645f4a13933ef9532b738f4bb5bc6dd5a6f26048f604d3f96d29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTTimelock",
            "src": "contracts/NFTTimelock.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/NFTTimelock.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "tokenId",
            "src": "contracts/NFTTimelock.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "unlockTime",
            "src": "contracts/NFTTimelock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NFTTimelock",
              "src": "contracts/NFTTimelock.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:IFIACoin": {
        "src": "contracts/ReentrantReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ReentrantReceiver.sol:ReentrantReceiver": {
        "src": "contracts/ReentrantReceiver.sol:8",
        "version": {
          "withMetadata": "49af3903d1b2333a073ed08b43494b99f81fa4a2dbe3fd73372a0df52d275304",
          "withoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f",
          "linkedWithoutMetadata": "a51784d31bc902a8bbd99d069fc17d98706bf2b0df31b93be9f53813ecfce97f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrantReceiver",
            "src": "contracts/ReentrantReceiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:9"
            },
            {
              "label": "attacker",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ReentrantReceiver",
              "src": "contracts/ReentrantReceiver.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleMultiSig.sol:SimpleMultiSig": {
        "src": "contracts/SimpleMultiSig.sol:4",
        "version": {
          "withMetadata": "cc87cf1c556e166768caf882fca63e51cc3d396ba43f291d1a10dcc10d507ff3",
          "withoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e",
          "linkedWithoutMetadata": "4dad3e5ef724f403e3c5624fd909fb4aa5ae735a45855504515d0510b8533e8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "submitTransaction(address,uint256,bytes)",
          "confirmTransaction(uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "changeRequirement(uint256)",
          "executeTransaction(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleMultiSig",
            "src": "contracts/SimpleMultiSig.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:5"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:6"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Tx)8723_storage)dyn_storage",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:16"
            },
            {
              "label": "isConfirmed",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:17"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleMultiSig",
              "src": "contracts/SimpleMultiSig.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Tx)8723_storage)dyn_storage": {
              "label": "struct SimpleMultiSig.Tx[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_struct(Tx)8723_storage": {
              "label": "struct SimpleMultiSig.Tx",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "confirmations",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:IFIACoin": {
        "src": "contracts/TestCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestCaller.sol:TestCaller": {
        "src": "contracts/TestCaller.sol:8",
        "version": {
          "withMetadata": "e9972b2161c0d52b36398a4f2082b55306423fe3806bafda5def3f92f506c5ec",
          "withoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31",
          "linkedWithoutMetadata": "e85d212fa3667ec3064cea7ebf3a004e1ae6b58af05c08b7ca9af791c7064d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwo(address,address,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:IFIA": {
        "src": "contracts/TestProtectedCaller.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "protectedTransfer(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/TestProtectedCaller.sol:TestProtectedCaller": {
        "src": "contracts/TestProtectedCaller.sol:21",
        "version": {
          "withMetadata": "4163e82de6020322da8066ceb5dee243728a2ccab8a9ee8f8aac4cb91355afeb",
          "withoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629",
          "linkedWithoutMetadata": "5c48bd5ffd7c05191466c8dffe2be6003be311dcf7bcb7f61a8462ad1dc57629"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callTwice(address,address,uint256,uint256,uint256)",
          "reuseNonceInOneTx(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IUniswapV3Pool": {
        "src": "contracts/interfaces/IUniswapV3.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "token0()",
          "token1()",
          "fee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IUniswapV3.sol:IWETH9": {
        "src": "contracts/interfaces/IUniswapV3.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    }
  ]
}